import pytest
import pathlib
import json
from fairscape_cli.__main__ import cli as fairscape_cli_app


def _load_metadata(crate_path: pathlib.Path):
    """Helper function to load and return metadata from RO-Crate"""
    metadata_path = crate_path / "ro-crate-metadata.json"
    with open(metadata_path, 'r') as f:
        return json.load(f)


def _get_root_dataset(metadata):
    """Get the root dataset from the metadata"""
    for entity in metadata.get("@graph", []):
        entity_type = entity.get("@type")
        if isinstance(entity_type, list):
            if "Dataset" in entity_type or "https://w3id.org/EVI#ROCrate" in entity_type:
                if entity.get("@id") != "ro-crate-metadata.json":
                    return entity
        elif entity_type == "Dataset":
            if entity.get("@id") != "ro-crate-metadata.json":
                return entity
    return None


def _extract_ids_from_list(items):
    """Extract @id values from a list of dicts"""
    return {item["@id"] for item in items if "@id" in item}


class TestAddIOCommand:
    """Test suite for 'fairscape augment add-io' command."""

    def test_basic_generated_dataset(self, runner, tmp_path):
        """
        Test 1: Basic case - Dataset with generatedBy relationship
        Expected: Input: dataset-input-1 | Output: dataset-output-1
        """
        crate_path = tmp_path / "test_crate_1"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Test Crate 1 - Basic Generated Dataset",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing dataset with generatedBy relationship",
                "--keywords", "test", "--keywords", "basic"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "Data Processing Computation",
                "--run-by", "Test User",
                "--date-created", "2024-01-01",
                "--description", "A computation that generates output dataset",
                "--keywords", "computation", "--keywords", "processing",
                "--guid", "ark:99999/computation-1",
                "--used-dataset", "ark:99999/dataset-input-1",
                "--generated", "ark:99999/dataset-output-1"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Output Dataset",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Dataset generated by computation",
                "--keywords", "output", "--keywords", "generated",
                "--data-format", "csv",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--generated-by", "ark:99999/computation-1",
                "--guid", "ark:99999/dataset-output-1"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Input Dataset",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Dataset used as input",
                "--keywords", "input", "--keywords", "source",
                "--data-format", "csv",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--used-by", "ark:99999/computation-1",
                "--guid", "ark:99999/dataset-input-1"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path)]
        )
        assert result.exit_code == 0
        
        metadata = _load_metadata(crate_path)
        root = _get_root_dataset(metadata)
        assert root is not None
        
        inputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#inputs", []))
        outputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#outputs", []))
        
        assert inputs == {"ark:99999/dataset-input-1"}
        assert outputs == {"ark:99999/dataset-output-1"}

    def test_samples_always_inputs(self, runner, tmp_path):
        """
        Test 2: Samples are always treated as inputs
        Expected: Input: sample-a, sample-b | Output: dataset-sample-results
        """
        crate_path = tmp_path / "test_crate_2"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Test Crate 2 - Samples Test",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing samples as inputs",
                "--keywords", "test", "--keywords", "samples"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "sample", str(crate_path),
                "--name", "Sample A",
                "--author", "Test User",
                "--description", "Biological sample A",
                "--keywords", "sample", "--keywords", "biological",
                "--guid", "ark:99999/sample-a"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "sample", str(crate_path),
                "--name", "Sample B",
                "--author", "Test User",
                "--description", "Biological sample B",
                "--keywords", "sample", "--keywords", "biological",
                "--cell-line-reference", "HeLa",
                "--guid", "ark:99999/sample-b"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Sample Analysis Results",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Results from sample analysis",
                "--keywords", "results", "--keywords", "analysis",
                "--data-format", "csv",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--guid", "ark:99999/dataset-sample-results"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path)]
        )
        assert result.exit_code == 0
        
        metadata = _load_metadata(crate_path)
        root = _get_root_dataset(metadata)
        
        inputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#inputs", []))
        outputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#outputs", []))
        
        assert inputs == {"ark:99999/sample-a", "ark:99999/sample-b","ark:99999/dataset-sample-results"}
        assert outputs == {"ark:99999/dataset-sample-results"}

    def test_external_references(self, runner, tmp_path):
        """
        Test 3: External references - inputs not defined in RO-Crate
        Expected: Input: external-dataset-1, external-dataset-2, https://example.com/dataset/123 | Output: local-output
        """
        crate_path = tmp_path / "test_crate_3"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Test Crate 3 - External References",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing references to external datasets",
                "--keywords", "test", "--keywords", "external"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "External Data Processing",
                "--run-by", "Test User",
                "--date-created", "2024-01-01",
                "--description", "Computation using external datasets",
                "--keywords", "external", "--keywords", "processing",
                "--used-dataset", "ark:99999/external-dataset-1",
                "--used-dataset", "ark:99999/external-dataset-2",
                "--used-dataset", "https://example.com/dataset/123",
                "--generated", "ark:99999/local-output",
                "--guid", "ark:99999/computation-external"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Local Output",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Output from external data processing",
                "--keywords", "output", "--keywords", "local",
                "--data-format", "json",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--generated-by", "ark:99999/computation-external",
                "--guid", "ark:99999/local-output"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path)]
        )
        assert result.exit_code == 0
        
        metadata = _load_metadata(crate_path)
        root = _get_root_dataset(metadata)
        
        inputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#inputs", []))
        outputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#outputs", []))
        
        assert inputs == {
            "ark:99999/external-dataset-1",
            "ark:99999/external-dataset-2",
            "https://example.com/dataset/123"
        }
        assert outputs == {"ark:99999/local-output"}

    def test_pipeline_intermediate_datasets(self, runner, tmp_path):
        """
        Test 4: Pipeline with intermediate datasets
        Expected: Input: raw-data (external) | Output: analysis-results
        Note: cleaned-data is intermediate (generated and used) so not in outputs
        """
        crate_path = tmp_path / "test_crate_4"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Test Crate 4 - Pipeline Test",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing pipeline with intermediate datasets",
                "--keywords", "test", "--keywords", "pipeline"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "Step 1 - Data Cleaning",
                "--run-by", "Test User",
                "--date-created", "2024-01-01",
                "--description", "First step in pipeline",
                "--keywords", "cleaning", "--keywords", "step1",
                "--used-dataset", "ark:99999/raw-data",
                "--generated", "ark:99999/cleaned-data",
                "--guid", "ark:99999/computation-step1"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "Step 2 - Data Analysis",
                "--run-by", "Test User",
                "--date-created", "2024-01-02",
                "--description", "Second step in pipeline",
                "--keywords", "analysis", "--keywords", "step2",
                "--used-dataset", "ark:99999/cleaned-data",
                "--generated", "ark:99999/analysis-results",
                "--guid", "ark:99999/computation-step2"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Cleaned Data",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Cleaned intermediate data",
                "--keywords", "cleaned", "--keywords", "intermediate",
                "--data-format", "csv",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--generated-by", "ark:99999/computation-step1",
                "--used-by", "ark:99999/computation-step2",
                "--guid", "ark:99999/cleaned-data"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Analysis Results",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Final analysis results",
                "--keywords", "results", "--keywords", "final",
                "--data-format", "json",
                "--date-published", "2024-01-02",
                "--embargoed",
                "--generated-by", "ark:99999/computation-step2",
                "--guid", "ark:99999/analysis-results"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path)]
        )
        assert result.exit_code == 0
        
        metadata = _load_metadata(crate_path)
        root = _get_root_dataset(metadata)
        
        inputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#inputs", []))
        outputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#outputs", []))
        
        assert inputs == {"ark:99999/raw-data"}
        assert outputs == {"ark:99999/analysis-results"}

    def test_standalone_dataset_both_input_and_output(self, runner, tmp_path):
        """
        Test 5: Standalone dataset (not generated, not used) should be both input and output
        Expected: supplementary-data appears in both inputs and outputs
        """
        crate_path = tmp_path / "test_crate_5"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Test Crate 5 - Complex Relationships",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing complex input/output relationships",
                "--keywords", "test", "--keywords", "complex"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "sample", str(crate_path),
                "--name", "Patient Sample 1",
                "--author", "Test User",
                "--description", "Patient tissue sample",
                "--keywords", "patient", "--keywords", "tissue",
                "--guid", "ark:99999/sample-patient-1"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "experiment", str(crate_path),
                "--name", "Proteomics Experiment",
                "--experiment-type", "Mass Spectrometry",
                "--run-by", "Test User",
                "--description", "MS analysis of patient samples",
                "--date-performed", "2024-01-01",
                "--used-sample", "ark:99999/sample-patient-1",
                "--generated", "ark:99999/ms-raw-data",
                "--guid", "ark:99999/experiment-1"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "MS Raw Data",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Raw mass spectrometry data",
                "--keywords", "ms", "--keywords", "raw",
                "--data-format", "mzML",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--generated-by", "ark:99999/experiment-1",
                "--used-by", "ark:99999/computation-analysis",
                "--guid", "ark:99999/ms-raw-data"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "Protein Database Search",
                "--run-by", "Test User",
                "--date-created", "2024-01-02",
                "--description", "Search against protein database",
                "--keywords", "search", "--keywords", "database",
                "--used-dataset", "ark:99999/ms-raw-data",
                "--used-dataset", "https://uniprot.org/database/human",
                "--generated", "ark:99999/protein-ids",
                "--guid", "ark:99999/computation-analysis"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Identified Proteins",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "List of identified proteins",
                "--keywords", "proteins", "--keywords", "identified",
                "--data-format", "csv",
                "--date-published", "2024-01-02",
                "--embargoed",
                "--generated-by", "ark:99999/computation-analysis",
                "--guid", "ark:99999/protein-ids"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Supplementary Data",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Additional supplementary data",
                "--keywords", "supplementary", "--keywords", "additional",
                "--data-format", "xlsx",
                "--date-published", "2024-01-03",
                "--embargoed",
                "--guid", "ark:99999/supplementary-data"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path)]
        )
        assert result.exit_code == 0
        
        metadata = _load_metadata(crate_path)
        root = _get_root_dataset(metadata)
        
        inputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#inputs", []))
        outputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#outputs", []))
        
        assert "ark:99999/sample-patient-1" in inputs
        assert "https://uniprot.org/database/human" in inputs
        assert "ark:99999/supplementary-data" in inputs
        
        assert "ark:99999/protein-ids" in outputs
        assert "ark:99999/supplementary-data" in outputs

    def test_shared_dataset_edge_case(self, runner, tmp_path):
        """
        Test 6: Edge case - shared dataset (not generated but used by multiple computations)
        Expected: Input: shared-dataset | Output: output-b
        """
        crate_path = tmp_path / "test_crate_6"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Test Crate 6 - Edge Cases",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing edge cases in relationships",
                "--keywords", "test", "--keywords", "edge"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Shared Dataset",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Dataset used by multiple computations",
                "--keywords", "shared", "--keywords", "multi-use",
                "--data-format", "hdf5",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--used-by", "ark:99999/comp-a",
                "--used-by", "ark:99999/comp-b",
                "--guid", "ark:99999/shared-dataset"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "Computation A",
                "--run-by", "Test User",
                "--date-created", "2024-01-01",
                "--description", "First computation",
                "--keywords", "comp", "--keywords", "a",
                "--used-dataset", "ark:99999/shared-dataset",
                "--generated", "ark:99999/output-a",
                "--guid", "ark:99999/comp-a"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "computation", str(crate_path),
                "--name", "Computation B",
                "--run-by", "Test User",
                "--date-created", "2024-01-01",
                "--description", "Second computation",
                "--keywords", "comp", "--keywords", "b",
                "--used-dataset", "ark:99999/shared-dataset",
                "--used-dataset", "ark:99999/output-a",
                "--generated", "ark:99999/output-b",
                "--guid", "ark:99999/comp-b"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Output A",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Output from computation A",
                "--keywords", "output", "--keywords", "a",
                "--data-format", "json",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--generated-by", "ark:99999/comp-a",
                "--used-by", "ark:99999/comp-b",
                "--guid", "ark:99999/output-a"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "dataset", str(crate_path),
                "--name", "Output B",
                "--author", "Test User",
                "--version", "1.0",
                "--description", "Final output from computation B",
                "--keywords", "output", "--keywords", "b",
                "--data-format", "json",
                "--date-published", "2024-01-01",
                "--embargoed",
                "--generated-by", "ark:99999/comp-b",
                "--guid", "ark:99999/output-b"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path)]
        )
        assert result.exit_code == 0
        
        metadata = _load_metadata(crate_path)
        root = _get_root_dataset(metadata)
        
        inputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#inputs", []))
        outputs = _extract_ids_from_list(root.get("https://w3id.org/EVI#outputs", []))
        
        assert inputs == {"ark:99999/shared-dataset"}
        assert outputs == {"ark:99999/output-b"}

    def test_verbose_output(self, runner, tmp_path):
        """
        Test that verbose flag provides detailed output
        """
        crate_path = tmp_path / "test_verbose"
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "create", str(crate_path),
                "--name", "Verbose Test",
                "--organization-name", "Test Org",
                "--project-name", "Test Project",
                "--description", "Testing verbose output",
                "--keywords", "test"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            [
                "rocrate", "register", "sample", str(crate_path),
                "--name", "Test Sample",
                "--author", "Test User",
                "--description", "A test sample",
                "--keywords", "sample",
                "--guid", "ark:99999/test-sample"
            ]
        )
        assert result.exit_code == 0
        
        result = runner.invoke(
            fairscape_cli_app,
            ["augment", "add-io", str(crate_path), "--verbose"]
        )
        assert result.exit_code == 0
        assert "=== Analyzing RO-Crate structure ===" in result.output
        assert "Found 0 datasets:" in result.output
        assert "Found 1 samples:" in result.output
        assert "ark:99999/test-sample" in result.output
        assert "=== Calculated Inputs" in result.output
        assert "=== Calculated Outputs" in result.output
        assert "=== Updating RO-Crate ===" in result.output