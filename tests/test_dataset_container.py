import os
import sys

sys.path.insert(
    0, 
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), 
        '..')
    )
)

from click.testing import CliRunner
from fairscape_cli.main import cli as fairscape_cli_app

from fairscape_cli.models.dataset import (
    Dataset,
    DatasetContainer
)

runner = CliRunner()


class TestDatasetContainerClass():
    runner = CliRunner()
    rocrate_path = "./tests/data/test_ds_crate"

    def _test_pydantic_init_empty(self):

        guid = "ark:99999/test-container"
        name = "test-container"
        description = "A test dataset container for test datasets"

        ds_container = DatasetContainer(**{
            "guid": guid,
            "name": name,
            "description": description,
            "keywords": ["test"],
            "hasPart": [],
            "isPartOf": []
        })

        ds_container_json = ds_container.dict(by_alias=True)

        # assert json is correct
        assert ds_container_json['@id'] == guid
        assert ds_container_json['name'] == name
        assert ds_container_json['description'] == description
        assert ds_container_json['@type'] == 'https://w3id.org/EVI#Dataset'


    def test_pydantic_init_datasets(self):

        guid = "ark:99999/test-container"
        name = "test-container"
        description = "A test dataset container for test datasets"

        partTwo = {
                "@id": "ark:99999/test-dataset-two", 
                "@type": "https://w3id.org/EVI#Dataset",
                "name": "Test Dataset Two"
        }
        hasPart = [
            "ark:99999/test-dataset-one",
            partTwo
        ]
        isPartOf = [
            "ark:99999/test-crate"
        ]

        ds_container = DatasetContainer(**{
            "guid": guid,
            "name": name,
            "description": description,
            "keywords": ["test"],
            "hasPart": hasPart,
            "isPartOf": isPartOf
        })

        ds_container_json = ds_container.model_dump(by_alias=True)

        # assert json is correct
        assert ds_container_json['@id'] == guid
        assert ds_container_json['name'] == name
        assert ds_container_json['description'] == description
        assert ds_container_json['@type'] == 'https://w3id.org/EVI#Dataset'

        assert ds_container_json['hasPart'][0] == "ark:99999/test-dataset-one"
        assert ds_container_json['hasPart'][1] == partTwo
        assert ds_container_json['isPartOf'][0] == "ark:99999/test-crate"


    def test_rocrate_methods(self):
        pass
        

    def test_cli_crate_register(self):

        # create a crate
        crate_id = "ark:59853/UVA/B2AI/rocrate_test"
        crate_name = 'test rocrate'

        create_rocrate = [
            "rocrate", 
            "create", 
            f"--guid '{crate_id}'",
            f"--name '{crate_name}'",
            "--organization-name 'UVA'",
            "--project-name 'B2AI'",
            "--description 'test rocrate for dataset container'",
            "--keywords 'test'",
            f"{self.rocrate_path}"
        ]
        
        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(create_rocrate) 
        )

        # add a dataset
        add_dataset = [
            "rocrate",
            "add",
            "dataset",
            "--name 'Test Dataset'",
            "--guid 'ark:59853/UVA/B2AI/rocrate_test/music_data'",
            "--name 'AP-MS embeddings'",
            "--date-published '2021-04-23'",
            "--description 'Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.'",
            "--keywords 'test'",
            "--author 'Gygi lab (https://gygi.hms.harvard.edu/team.html)'",
            "--version '1.0.0'",
            "--associated-publication 'Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions'",
            "--additional-documentation 'https://idekerlab.ucsd.edu/music/'",
            "--data-format 'CSV'",
            "--source-filepath 'tests/data/APMS_embedding_MUSIC.csv'",
            f"--destination-filepath '{self.rocrate_path + 'APMS_embedding_MUSIC.csv'}'",
            f"'{self.rocrate_path}'",
        ]

        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(add_dataset) 
        )

        # register a dataset container with no datasets initially

        ds_container_guid = "ark:59853/UVA/B2AI/rocrate_test/music_ds_collection"

        register_ds_container = [

            "rocrate",
            "register",
            "dataset-container",
            f"--guid '{ds_container_guid}'",
            "--name 'Music IF Images Collection'",
            "--description 'Collection for all IF Music Images'",
            "--keywords 'test'",
            "--has-part 'ark:59853/UVA/B2AI/rocrate_test/music_data'", 
            f"{self.rocrate_path}"

        ]

        result = self.runner.invoke(
            fairscape_cli_app,
            ' '.join(register_ds_container)
        )

        print(result.output)

        assert result.exit_code == 0
        assert ds_container_guid in result.output 
        

    def test_crate_push_pop(self):

        # create a crate
        crate_id = "ark:59853/UVA/B2AI/rocrate_test"
        crate_name = 'test rocrate'

        create_rocrate = [
            "rocrate", 
            "create", 
            f"--guid '{crate_id}'",
            f"--name '{crate_name}'",
            "--organization-name 'UVA'",
            "--project-name 'B2AI'",
            "--description 'dataset container test rocrate'",
            "--keywords 'test'",
            f"{self.rocrate_path}"
        ]
        
        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(create_rocrate) 
        )

        # add a dataset
        add_dataset = [
            "rocrate",
            "add",
            "dataset",
            "--name 'Test Dataset'",
            "--guid 'ark:59853/UVA/B2AI/rocrate_test/music_data'",
            "--name 'AP-MS embeddings'",
            "--date-published '2021-04-23'",
            "--description 'Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.'",
            "--keywords 'test'",
            "--author 'Gygi lab (https://gygi.hms.harvard.edu/team.html)'",
            "--version '1.0.0'",
            "--associated-publication 'Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions'",
            "--additional-documentation 'https://idekerlab.ucsd.edu/music/'",
            "--data-format 'CSV'",
            "--source-filepath 'tests/data/APMS_embedding_MUSIC.csv'",
            f"--destination-filepath '{self.rocrate_path + 'APMS_embedding_MUSIC.csv'}'",
            f"'{self.rocrate_path}'",
        ]

        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(add_dataset) 
        )

        # register a dataset container with no datasets initially

        ds_container_guid = "ark:59853/UVA/B2AI/rocrate_test/music_ds_collection"

        register_ds_container = [

            "rocrate",
            "register",
            "dataset-container",
            f"--guid '{ds_container_guid}'",
            "--name 'Music IF Images Collection'",
            "--description 'Collection for all IF Music Images'",
            "--keywords 'test'",
            self.rocrate_path

        ]

        result = self.runner.invoke(
            fairscape_cli_app,
            ' '.join(register_ds_container)
        )

        print(result.output)

        assert result.exit_code == 0
        assert ds_container_guid in result.output 

        # push dataset into dataset container
        push_command = [
            "rocrate",
            "dataset-container",
            "push",
            f"--dataset-container '{ds_container_guid}'",
            "--dataset-guid 'ark:59853/UVA/B2AI/rocrate_test/music_data'", 
            self.rocrate_path
        ]

        push_result = self.runner.invoke(
            fairscape_cli_app,
            ' '.join(push_command)
        )

        assert push_result.exit_code == 0

        pop_command = [
            "rocrate",
            "dataset-container",
            "push",
            f"--dataset-container '{ds_container_guid}'",
            "--dataset-guid 'ark:59853/UVA/B2AI/rocrate_test/music_data'", 
            self.rocrate_path
        ]

        pop_result = self.runner.invoke(
            fairscape_cli_app,
            ' '.join(pop_command)
        )

        assert pop_result.exit_code == 0
