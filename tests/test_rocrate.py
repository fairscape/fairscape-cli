import os
import sys

sys.path.insert(
    0, 
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), 
        '..')
    )
)

from typer.testing import CliRunner
from fairscape_cli.apps.fairscape import app as fairscape_cli_app

runner = CliRunner()
 
class TestROCrateSuccess():
    runner = CliRunner()
    
   
    def test_rocrate_create(self): 

        create_rocrate = [
            "rocrate", 
            "create", 
            "--guid ark:59853/UVA/B2AI/rocrate_test",
            "--name 'test rocrate'",
            "--organization-id 'ark:59853/UVA'",
            "--project-id 'ark:59853/UVA/B2AI'",
            "--path './tests/example_rocrate'",
        ]
        
        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(create_rocrate) 
        )
        print(result.stdout)

        assert result.exit_code == 0
        assert "Created RO Crate at" in result.stdout

        # TODO check that the ro-crate-metadata.json is correct


    def test_add_dataset(self):

        test_dataset = {
            "id": "ARK:APMS_embedding.MuSIC.1/5b3793b6-2bd0-4c51-9f35-c5cd7ddd366c.csv",
            "name": "AP-MS embeddings",
            "type": "schema:Dataset",
            "author": "Gygi lab (https://gygi.hms.harvard.edu/team.html)",
            "datePublished": "2021-04-23",
            "version": "1.0",
            "description": "Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.",
            "associatedPublication": "Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions",
            "additionalDocumentation": [
                "https://idekerlab.ucsd.edu/music/"
            ],
            "format": "CSV",
            "dataSchema": 
              'APMS_ID str, "APMS_1, APMS_2, ...", protein, embedding array of float X 1024',
            "derivedFrom": ["node2vec predict"],
            "generatedBy": [],
            "usedBy": ["create labeled training & test sets  random_forest_samples.py"],
            "contentUrl": "https://github.com/idekerlab/MuSIC/blob/master/Examples/APMS_embedding.MuSIC.csv"
        }

        add_dataset = [
            "rocrate",
            "add",
            "dataset",
            "--rocrate-path './tests/example_rocrate'",
            f"--name '{test_dataset['name']}'",
            "--guid 'ark:59853/UVA/B2AI/rocrate_test/music_data'",
            "--name 'AP-MS embeddings'",
            f"--description '{test_dataset['description']}'" ,
            f"--datepublished '{test_dataset['datePublished']}'",
            f"--author '{test_dataset['author']}'",
            "--version '1.0.0'",
            f"--associatedpublication '{test_dataset['associatedPublication']}'",
            f"--additionaldocumentation '{test_dataset['additionalDocumentation'][0]}'",
            f"--dataformat '{test_dataset['format']}'",
            "--sourcepath './tests/data/APMS_embedding_MUSIC.csv'",
            "--destinationpath './tests/example_rocrate/APMS_embedding_MUSIC.csv'"
        ]

        print(' '.join(add_dataset))

        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(add_dataset) 
        )
        print(result.stdout)

        assert result.exit_code == 0
        

    def test_add_computation(self):

        test_computation = {
            "id": "ARK:average_predicted_protein_proximities.1/c295abcd-8ad8-44ff-95e3-e5e65f1667da",
            "name": "average predicted protein proximities",
            "type": "evi:Computation",
            "runBy": "Qin, Y.",
            "dateCreated": "2021-05-23",
            "description": "Average the predicted proximities",
            "usedSoftware":[
              "random_forest_output (https://github.com/idekerlab/MuSIC/blob/master/random_forest_output.py)"
            ],
            "usedDataset": [ 
        """predicted protein proximities:
        Fold 1 proximities:
            IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_1.pkl""",
            "IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_1.pkl",
        """Fold 1 proximities:
              IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_2.pkl""",
            "IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_2.pkl",
        """Fold 1 proximities:
              IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_3.pkl""",
            "IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_3.pkl",
        """Fold 1 proximities:
              IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_4.pkl""",
            "IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_4.pkl",
        """Fold 1 proximities:
              IF_emd_1_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_5.pkl""",
        "IF_emd_2_APMS_emd_1.RF_maxDep_30_nEst_1000.fold_5.pkl"
            ],
            "associatedPublication": "Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions. Nature 600, 536–542 2021",

            "additionalDocumentation": ["https://idekerlab.ucsd.edu/music/"],
            "generated": [
            "averages of predicted protein proximities (https://github.com/idekerlab/MuSIC/blob/master/Examples/MuSIC_predicted_proximity.txt)"
        ]
        }

        software = [f'\"{element}\"' for element in test_computation['usedSoftware']]
        datasets = [f'\"{element}\"' for element in test_computation['usedDataset']]
        generated = [f'\"{element}\"' for element in test_computation['generated']]

        add_computation = [
            "rocrate",
            "add",
            "computation",
            "--rocrate-path './tests/example_rocrate'",
            "--guid 'ark:59853/UVA/B2AI/rocrate_test/music_test_run'",
            f"--name '{test_computation['name']}'",
            "--run-by 'Max Levinson'",
            "--date-created '03-17-2023'",
            "--description 'test run of music pipeline using example data'",
            f"--associatedpublication '{test_computation['associatedPublication']}'",
            f"--additionaldocumentation '{test_computation['additionalDocumentation']}' ",
            f"--usedsoftware '[{','.join(software)}]'",
            f"--useddataset '[{','.join(datasets)}]'",
            f"--generated '[{','.join(generated)}]'"
        ]

        print(' '.join(add_computation))

        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(add_computation) 
        )
        print(result.stdout)

        assert result.exit_code == 0


    def test_add_software(self):

        example_software = {
            "id": "ARK:calibrate_pariwise_distance.1/467f5ebd-cb29-43a1-beab-aa2d50606eff.py",
            "name": "calibrate pairwise distance",
            "type": "evi:Software",
            "author": "Qin, Y.",
            "dateModified": "2021-06-20",
            "version": "1.0",
            "description": "script written in python to calibrate pairwise distance.",
            "associatedPublication": "Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions. Nature 600, 536–542 2021",
            "additionalDocumentation": ["https://idekerlab.ucsd.edu/music/"],
            "format": "py",
            "usedByComputation": ["ARK:compute_standard_proximities.1/f9aa5f3f-665a-4ab9-8879-8d0d52f05265"],
            "contentUrl": "https://github.com/idekerlab/MuSIC/blob/master/calibrate_pairwise_distance.py"
        }

        add_software = [
            "rocrate",
            "add",
            "dataset",
            "--rocrate-path './tests/example_rocrate'",
            "--guid ark:59853/UVA/B2AI/rocrate_test/music_software",
            "--name MuSIC",
            f"--author '{example_software['author']}'",
            "--version '1.0'",
            f"--description '{example_software['description']}'",
            f"--associatedpublication '{example_software['associatedPublication']}'",
            "--dataformat '.py'",
            f"--datepublished '{example_software['dateModified']}'",
            "--sourcepath './tests/data/calibrate_pairwise_distance.py'",
            "--destinationpath './tests/example_rocrate/calibrate_pairwise_distance.py'",
        
        ]


        print(' '.join(add_software))

        result = self.runner.invoke(
            fairscape_cli_app, 
            ' '.join(add_software) 
        )
        print(result.stdout)

        assert result.exit_code == 0


def _test_validate_rocrate():
    pass

def _test_hash_rocrate():
    pass

def _test_package_rocrate():
    pass
