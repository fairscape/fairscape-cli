import os
import sys

sys.path.insert(
    0, 
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), 
        '..')
    )
)

from typer.testing import CliRunner
from fairscape_cli.apps.fairscape import app as fairscape_cli_app

runner = CliRunner()

def run_test_command(test_command):

    result = runner.invoke(
        fairscape_cli_app, 
        test_command
    )

    print(f"\nCOMMAND: {' '.join(test_command)}\nExitCode: {result.exit_code}\nOutput: {result.stdout}")
    return result
 
   
def test_rocrate_create(): 

    create_rocrate = [
        "rocrate", 
        "create", 
        "--guid ark:59853/UVA/B2AI/rocrate_test",
        "--name 'test rocrate'",
        "--organization-id 'ark:59853/UVA'",
        "--project-id 'ark:59853/UVA/B2AI'",
        "--path './tests/example_rocrate'",
    ]
    
    result = runner.invoke(
        fairscape_cli_app, 
        ' '.join(create_rocrate) 
    )
    print(result.stdout)

    assert result.exit_code == 0
    assert "Created RO Crate at" in result.stdout

    # TODO check that the ro-crate-metadata.json is correct


def test_add_dataset():

    test_dataset = {
        "id": "ARK:APMS_embedding.MuSIC.1/5b3793b6-2bd0-4c51-9f35-c5cd7ddd366c.csv",
        "name": "AP-MS embeddings",
        "type": "schema:Dataset",
        "author": "Gygi lab (https://gygi.hms.harvard.edu/team.html)",
        "datePublished": "2021-04-23",
        "version": "1.0",
        "description": "Affinity purification mass spectrometer (APMS) embeddings for each protein in the study,  generated by node2vec predict.",
        "associatedPublication": "Qin, Y. et al. A multi-scale map of cell structure fusing protein images and interactions",
        "additionalDocumentation": [
            "https://idekerlab.ucsd.edu/music/"
        ],
        "format": "CSV",
        "dataSchema": 
          'APMS_ID str, "APMS_1, APMS_2, ...", protein, embedding array of float X 1024',
        "derivedFrom": ["node2vec predict"],
        "generatedBy": [],
        "usedBy": ["create labeled training & test sets  random_forest_samples.py"],
        "contentUrl": "https://github.com/idekerlab/MuSIC/blob/master/Examples/APMS_embedding.MuSIC.csv"
    }

    add_dataset = [
        "rocrate",
        "add",
        "dataset",
        "--rocrate-path './tests/example_rocrate'",
        f"--name '{test_dataset['name']}'",
        "--guid 'ark:59853/UVA/B2AI/rocrate_test/music_data'",
        "--name 'AP-MS embeddings'",
        f"--description '{test_dataset['description']}'" ,
        f"--datepublished '{test_dataset['datePublished']}'",
        f"--author '{test_dataset['author']}'",
        "--version '1.0.0'",
        f"--associatedpublication '{test_dataset['associatedPublication']}'",
        f"--additionaldocumentation '{test_dataset['additionalDocumentation'][0]}'",
        f"--dataformat '{test_dataset['format']}'",
        "--sourcepath './tests/data/APMS_embedding_MUSIC.csv'",
        "--destinationpath './tests/example_rocrate/APMS_embedding_MUSIC.csv'"
    ]

    print(' '.join(add_dataset))

    result = runner.invoke(
        fairscape_cli_app, 
        ' '.join(add_dataset) 
    )
    print(result.stdout)

    assert result.exit_code == 0
    

def test_add_computation():
    add_computation = [
        "rocrate",
        "add",
        "computation",
        "--guid ark:59853/UVA/B2AI/rocrate_test/music_test_run",
        "--name music test run",
        "--runBy Max Levinson",
        "--description 'test run of music pipeline using example data'",
        "--associatedPublication ",
        "--additionalDocumentation ",
        "--usedSoftware ",
        "--usedDataset ",
        "--generated "
    ]

    result = run_test_command(add_computation)

    assert result.exit_code == 0

def test_add_software():
    add_software = [
        "rocrate",
        "add",
        "dataset",
        "--guid ark:59853/UVA/B2AI/rocrate_test/music_software",
        "--name MuSIC",
        "--author ",
        "--version ",
        "--description ",
        "--associatedPublication ",
        "--format .py",
        "--sourcePath ",
        "--destinationPath ",
    
    ]

    result = run_test_command(add_software)

    assert result.exit_code == 0

def _test_validate_rocrate():
    pass

def _test_hash_rocrate():
    pass

def _test_package_rocrate():
    pass
