{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fairscape-cli \u00b6 A utility for packaging objects and validating metadata for FAIRSCAPE. Features \u00b6 fairscape-cli provides a Command Line Interface (CLI) that allows the client side to create, manage, and publish scientific data packages: RO-Crate Management: Create and manipulate RO-Crate packages locally. Initialize RO-Crates in new or existing directories. Add data, software, and computation metadata. Copy files into the crate structure alongside metadata registration. Schema Handling: Define, infer, and validate data schemas (Tabular, HDF5). Create schema definition files. Add properties with constraints. Infer schemas directly from data files. Register schemas within RO-Crates. Data Import: Fetch data from external sources and convert them into RO-Crates. Import NCBI BioProjects. Convert Portable Encapsulated Projects (PEPs) to RO-Crates. Build Artifacts: Generate derived outputs from RO-Crates. Create detailed HTML datasheets summarizing crate contents. Generate provenance evidence graphs (JSON and HTML). Release Management: Organize multiple related RO-Crates into a cohesive release package. Initialize a release structure. Automatically link sub-crates and propagate metadata. Build a top-level datasheet for the release. Publishing: Publish RO-Crate metadata to external repositories. Upload RO-Crate directories or zip files to Fairscape. Create datasets on Dataverse instances. Mint or update DOIs on DataCite. Requirements \u00b6 Python 3.8+ Installation \u00b6 pip install fairscape-cli Command Overview \u00b6 The CLI is organized into several top-level commands: Command Description rocrate Core local RO-Crate manipulation (create, add files/metadata). schema Operations on data schemas (create, infer, add properties, add to crate). import Fetch external data into RO-Crate format (e.g., bioproject, pep). build Generate outputs from RO-Crates (e.g., datasheet, evidence-graph, release). publish Publish RO-Crates to repositories (e.g., fairscape, dataverse, mint dois). Use --help for details on any command or subcommand: fairscape-cli --help fairscape-cli rocrate --help fairscape-cli rocrate create --help fairscape-cli schema create-tabular --help Learn More \u00b6 For more detailed examples and a complete workflow demonstration, see the Complete Workflow Demo . Documentation \u00b6 Installation Command Reference Complete Workflow Demo","title":"Home"},{"location":"#fairscape-cli","text":"A utility for packaging objects and validating metadata for FAIRSCAPE.","title":"fairscape-cli"},{"location":"#features","text":"fairscape-cli provides a Command Line Interface (CLI) that allows the client side to create, manage, and publish scientific data packages: RO-Crate Management: Create and manipulate RO-Crate packages locally. Initialize RO-Crates in new or existing directories. Add data, software, and computation metadata. Copy files into the crate structure alongside metadata registration. Schema Handling: Define, infer, and validate data schemas (Tabular, HDF5). Create schema definition files. Add properties with constraints. Infer schemas directly from data files. Register schemas within RO-Crates. Data Import: Fetch data from external sources and convert them into RO-Crates. Import NCBI BioProjects. Convert Portable Encapsulated Projects (PEPs) to RO-Crates. Build Artifacts: Generate derived outputs from RO-Crates. Create detailed HTML datasheets summarizing crate contents. Generate provenance evidence graphs (JSON and HTML). Release Management: Organize multiple related RO-Crates into a cohesive release package. Initialize a release structure. Automatically link sub-crates and propagate metadata. Build a top-level datasheet for the release. Publishing: Publish RO-Crate metadata to external repositories. Upload RO-Crate directories or zip files to Fairscape. Create datasets on Dataverse instances. Mint or update DOIs on DataCite.","title":"Features"},{"location":"#requirements","text":"Python 3.8+","title":"Requirements"},{"location":"#installation","text":"pip install fairscape-cli","title":"Installation"},{"location":"#command-overview","text":"The CLI is organized into several top-level commands: Command Description rocrate Core local RO-Crate manipulation (create, add files/metadata). schema Operations on data schemas (create, infer, add properties, add to crate). import Fetch external data into RO-Crate format (e.g., bioproject, pep). build Generate outputs from RO-Crates (e.g., datasheet, evidence-graph, release). publish Publish RO-Crates to repositories (e.g., fairscape, dataverse, mint dois). Use --help for details on any command or subcommand: fairscape-cli --help fairscape-cli rocrate --help fairscape-cli rocrate create --help fairscape-cli schema create-tabular --help","title":"Command Overview"},{"location":"#learn-more","text":"For more detailed examples and a complete workflow demonstration, see the Complete Workflow Demo .","title":"Learn More"},{"location":"#documentation","text":"Installation Command Reference Complete Workflow Demo","title":"Documentation"},{"location":"schema-metadata/","text":"The Command Line Interface (CLI) offers users more than just the ability to transfer and register dataset objects. It also enables the addition of metadata to describe schemas and perform basic validation of objects. As of this release, the CLI solely supports tabular datasets. Tabular Dataset \u00b6 To illustrate, let's consider the tabular data frame named APMS_embedding_MUSIC.csv . This particular dataset comprises 1026 columns. The first column, Internal Experiment Identifier , identifies the experiment that generated the source data, while the second column, Gene Symbol , contains the Gene name for the bait protien. The remaining columns, from Embedding0 to Embedding1023 , are a 1024 length embedding vector. The original data frame has no headers, but after consulting with a domain expert, headers are added for clarity, and based on these headers, the schema will be described. Internal Experiment Identifier Gene Symbol Embedding0 Embedding1 Embedding2 ... Embedding1023 APMS_1 RRS1 0.07591 0.161315 -0.025731 ... -0.172205 APMS_2 SNRNP70 -0.019872 0.083736 0.151332 ... 0.042429 APMS_3 RPL18 0.067353 0.099565 0.308037 ... 0.049538 APMS_4 JMJD6 0.087387 -0.17969 0.036929 ... 0.068675 APMS_5 NCAPH2 0.007115 0.118820 -0.059649 ... 0.119648 APMS_6 BSG 0.143906 -0.034937 -0.141535 ... -0.178751 APMS_7 FAM189B -0.107395 0.284882 0.065763 ... 0.044294 APMS_8 MRPS11 -0.051772 0.045301 0.08211 ... 0.079971 APMS_9 TRIM28 -0.17398 0.209120 0.021203 ... -0.092368 APMS_10 LAMP3 0.048065 0.087677 0.000867 ... 0.047628 Throughout the rest of the document, we will use this tabular dataset as a guide to walk through the step-by-step process of creating, populating and validating the schema. Create schema \u00b6 To create a schema for a tabular dataset, the create-tabular command must be invoked, requiring a name , a brief description , a separator character, and an optional boolean value for header to specify the presence of column headers. Once created, the schema will be located in the destination specified by the SCHEMA_FILE . fairscape-cli schema create-tabular [ OPTIONS ] SCHEMA_FILE Options: --name TEXT [ required ] --description TEXT [ required ] --guid TEXT --separator TEXT [ required ] --header BOOLEAN --help Show this message and exit. In the schema creation example below, the symbol , (comma) is used as the separator and the header is set to False . The CLI will autogenerate a value for the guid . fairscape-cli schema create-tabular \\ --name 'APMS Embedding Schema' \\ --description 'Tabular format for APMS music embeddings from PPI networks from the music pipeline from the B2AI Cellmaps for AI project' \\ --separator ',' \\ --header False \\ ./schema_apms_music_embedding.json Populate schema \u00b6 To populate the schema for a tabular dataset, we describe its syntactic and semantic properties through a series of unique properties, each representing a single column or an array of similar columns. To add a property, we use the fairscape-cli schema add-property command. The first step in adding a property is to choose the datatype it represents in the column or array of columns. For example, if a column represents a string datatype, we create a string property by using the fairscape-cli schema add-property string command. We can use a similar command for other datatypes as well. The CLI supports five datatypes for a tabular dataset, which are listed in the table below. Datatype Description string Strings of text number Any numeric type integer Integral numbers array Ordered elements boolean True and False After choosing the datatype, we must fill in additional information about the column or array of columns it represents. The table headers below display all available options for each datatype. For a string property, this includes a unique name , an integer value for the index (where 0 represents the first column, 1 represents the second, and so on), a human-readable description , a standard vocabulary term for the value-url , and a regular expression for the data pattern in that column. While the first three options are required, the rest are optional. Datatype name index description value-url pattern items-datatype min-items max-items unique-items string required required required optional optional number required required required optional integer required required required optional array required required required optional required optional optional optional boolean required required required optional To view all available options and arguments, including those for the string datatype, we can use the command fairscape-cli schema add-property string --help , which will display a complete list of options. fairscape-cli schema add-property string [ OPTIONS ] SCHEMA_FILE Options: --name TEXT [ required ] --index INTEGER [ required ] --description TEXT [ required ] --value-url TEXT --pattern TEXT --help Show this message and exit. Add a String Property \u00b6 Columns index 0 and 1 have string values. Both can be constrained with an optional regex pattern. For our first column we have the experiment identifier, and add this to the schema with the following command. fairscape-cli schema add-property string \\ --name 'Experiment Identifier' \\ --index 0 \\ --description 'Identifier for the APMS experiment responsible for generating the raw PPI used to create this embedding vector' \\ --pattern '^APMS_[0-9]*$' \\ ./schema_apms_music_embedding.json For the second column we have Gene Symbols for values, We can choose then to provide the optional flag --value-url to align these values to an ontology. Using the (EDAM ontology of bioscientific data analysis and data management)[], we can specify that these are Gene Symbols. This can be usefull for specifying the Database of a particular Gene Identifier. Which enables linking Identifiers across databases. Any ontology can be used to align data. fairscape-cli schema add-property string \\ --name 'Gene Symbol' \\ --index 1 \\ --description 'Gene Symbol for the APMS bait protien' \\ --pattern '^[A-Za-z0-9\\-]*$' \\ --value-url 'http://edamontology.org/data_1026' \\ ./schema_apms_music_embedding.json Add an Array Property \u00b6 Instead of registering properties for 1024 individual columns we can add a property for an array of 1024 elements. We can accomplish this with a slice expression for the index. The following slice expressions are supported. Slice Expression Description i:: starting at index i to the final index ::i starting at index 0 to index i i:j starting at index i to index j We then must specify that the type of the data inside this array is numeric. Items are not contstrained to unique values. And that for every row we expect there to be exactly 1024 elements. fairscape-cli schema add-property array \\ --name 'MUSIC APMS Embedding' \\ --index '2::' \\ --description 'Embedding Vector values for genes determined by running node2vec on APMS PPI networks. Vector has 1024 values for each bait protien' \\ --items-datatype 'number' \\ --unique-items False \\ --min-items 1024 \\ --max-items 1024 \\ ./schema_apms_music_embedding.json Generated schema \u00b6 Looking at our schema we should have a json document equivalent to the following { \"@context\" : { \"@vocab\" : \"https://schema.org/\" , \"EVI\" : \"https://w3,org/EVI#\" }, \"@id\" : \"ark:59852/schema-apms-music-embedding-izNjXSs\" , \"@type\" : \"EVI:Schema\" , \"name\" : \"APMS Embedding Schema\" , \"description\" : \"Tabular format for APMS music embeddings from PPI networks from the music pipeline from the B2AI Cellmaps for AI project\" , \"properties\" : { \"Experiment Identifier\" : { \"description\" : \"Identifier for the APMS experiment responsible for generating the raw PPI used to create this embedding vector\" , \"index\" : 0 , \"valueURL\" : null , \"type\" : \"string\" , \"pattern\" : \"^APMS_[0-9]*$\" }, \"Gene Symbol\" : { \"description\" : \"Gene Symbol for the APMS bait protien\" , \"index\" : 1 , \"valueURL\" : \"http://edamontology.org/data_1026\" , \"type\" : \"string\" , \"pattern\" : \"^[A-Za-z0-9\\-]*$\" }, \"MUSIC APMS Embedding\" : { \"description\" : \"Embedding Vector values for genes determined by running node2vec on APMS PPI networks. Vector has 1024 values for each bait protien\" , \"index\" : \"2::\" , \"valueURL\" : null , \"type\" : \"array\" , \"maxItems\" : 1024 , \"minItems\" : 1024 , \"uniqueItems\" : false , \"items\" : { \"type\" : \"number\" } } }, \"type\" : \"object\" , \"additionalProperties\" : true , \"required\" : [ \"Experiment Identifier\" , \"Gene Symbol\" , \"MUSIC APMS Embedding\" ], \"seperator\" : \",\" , \"header\" : false , \"examples\" : [] } Validate schema \u00b6 With our schema we can execute the validation rules against some example data, and explore how errors are reported. In the github repo, example data is provided to evaluate the same schema we have just created. When validating against data where every row conforms to the schema, a simple success message is displayed. fairscape-cli schema validate \\ --data ./examples/schemas/MUSIC_embedding/APMS_embedding_MUSIC.csv \\ --schema ./examples/schemas/MUSIC_embedding/music_apms_embedding_schema.json Validation Success However when validating against data that contains issues, a table of errors is printed out. For this purpose we provide some intentionally corrupted data to demonstrate how these errors are reported. fairscape-cli schema validate \\ --data examples/schemas/MUSIC_embedding/APMS_embedding_corrupted.csv \\ --schema examples/schemas/MUSIC_embedding/music_apms_embedding_schema.json +-----+-----------------+----------------+-------------------------------------------------------+ | row | error_type | failed_keyword | message | +-----+-----------------+----------------+-------------------------------------------------------+ | 3 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 3 | | 4 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 4 | | 0 | ValidationError | pattern | 'APMS_A' does not match '^APMS_[0-9]*$' | | 1 | ValidationError | pattern | ' -8- ' does not match '^[A-Z0-9]*$' | | 2 | ValidationError | pattern | '-`~' does not match '^[A-Z0-9]*$' | +-----+-----------------+----------------+-------------------------------------------------------+ When errors are found there are two sources of these errors. Parsing errors which occur when attempting convert a row of tabular data into the specified json structure. This can happen when either the number of specified rows is incorrect, or the data for a specific column cannot be coerced to the datatype specified of the schema. When this occurs the row is marked as a failure and reported as a ParsingError. Rows that report a ParsingError are not validated against the jsonschema. Validation Errors occur when a data element violates the contraints specified by the schema. In our example we show multiple examples of strings that defy the regex specified by the pattern attribute. Other constraints include min and max for numeric and integer properties, length for string, etc. In future work we will expand to cover the entire json schema specification. Using default schemas \u00b6 For conveineince a collection of default schemas are provided for the Cell Maps for AI pipeline . These schemas have their own repo , and will track the progress of the pipeline as new data modalities are added. These default schemas are packaged and provided as part of the fairscape-cli, and can be implemented using the respective identifier for the schema. Examples for all of the existing default schemas are provided below. # validate imageloader files fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/imageloader/samplescopy.csv\" \\ --schema \"ark:59852/schema-cm4ai-imageloader-samplescopy\" fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/imageloader/uniquecopy.csv\" \\ --schema \"ark:59852/schema-cm4ai-imageloader-uniquecopy\" # validate image embedding outputs fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/image_embedding/image_emd.tsv\" \\ --schema \"ark:59852/schema-cm4ai-image-embedding-image-emd\" fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/image_embedding/labels_prob.tsv\" \\ --schema \"ark:59852/schema-cm4ai-image-embedding-labels-prob\" # validate apsm loader input fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/apmsloader/ppi_gene_node_attributes.tsv\" \\ --schema \"ark:59852/schema-cm4ai-apmsloader-gene-node-attributes\" fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/apmsloader/ppi_edgelist.tsv\" \\ --schema \"ark:59852/schema-cm4ai-apmsloader-ppi-edgelist\" # validate apms embedding fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/apms_embedding/ppi_emd.tsv\" \\ --schema \"ark:59852/schema-cm4ai-apms-embedding\" # validate coembedding fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/coembedding/coembedding_emd.tsv\" \\ --schema \"ark:59852/schema-cm4ai-coembedding\"","title":"Schema metadata"},{"location":"schema-metadata/#tabular-dataset","text":"To illustrate, let's consider the tabular data frame named APMS_embedding_MUSIC.csv . This particular dataset comprises 1026 columns. The first column, Internal Experiment Identifier , identifies the experiment that generated the source data, while the second column, Gene Symbol , contains the Gene name for the bait protien. The remaining columns, from Embedding0 to Embedding1023 , are a 1024 length embedding vector. The original data frame has no headers, but after consulting with a domain expert, headers are added for clarity, and based on these headers, the schema will be described. Internal Experiment Identifier Gene Symbol Embedding0 Embedding1 Embedding2 ... Embedding1023 APMS_1 RRS1 0.07591 0.161315 -0.025731 ... -0.172205 APMS_2 SNRNP70 -0.019872 0.083736 0.151332 ... 0.042429 APMS_3 RPL18 0.067353 0.099565 0.308037 ... 0.049538 APMS_4 JMJD6 0.087387 -0.17969 0.036929 ... 0.068675 APMS_5 NCAPH2 0.007115 0.118820 -0.059649 ... 0.119648 APMS_6 BSG 0.143906 -0.034937 -0.141535 ... -0.178751 APMS_7 FAM189B -0.107395 0.284882 0.065763 ... 0.044294 APMS_8 MRPS11 -0.051772 0.045301 0.08211 ... 0.079971 APMS_9 TRIM28 -0.17398 0.209120 0.021203 ... -0.092368 APMS_10 LAMP3 0.048065 0.087677 0.000867 ... 0.047628 Throughout the rest of the document, we will use this tabular dataset as a guide to walk through the step-by-step process of creating, populating and validating the schema.","title":"Tabular Dataset"},{"location":"schema-metadata/#create-schema","text":"To create a schema for a tabular dataset, the create-tabular command must be invoked, requiring a name , a brief description , a separator character, and an optional boolean value for header to specify the presence of column headers. Once created, the schema will be located in the destination specified by the SCHEMA_FILE . fairscape-cli schema create-tabular [ OPTIONS ] SCHEMA_FILE Options: --name TEXT [ required ] --description TEXT [ required ] --guid TEXT --separator TEXT [ required ] --header BOOLEAN --help Show this message and exit. In the schema creation example below, the symbol , (comma) is used as the separator and the header is set to False . The CLI will autogenerate a value for the guid . fairscape-cli schema create-tabular \\ --name 'APMS Embedding Schema' \\ --description 'Tabular format for APMS music embeddings from PPI networks from the music pipeline from the B2AI Cellmaps for AI project' \\ --separator ',' \\ --header False \\ ./schema_apms_music_embedding.json","title":"Create schema"},{"location":"schema-metadata/#populate-schema","text":"To populate the schema for a tabular dataset, we describe its syntactic and semantic properties through a series of unique properties, each representing a single column or an array of similar columns. To add a property, we use the fairscape-cli schema add-property command. The first step in adding a property is to choose the datatype it represents in the column or array of columns. For example, if a column represents a string datatype, we create a string property by using the fairscape-cli schema add-property string command. We can use a similar command for other datatypes as well. The CLI supports five datatypes for a tabular dataset, which are listed in the table below. Datatype Description string Strings of text number Any numeric type integer Integral numbers array Ordered elements boolean True and False After choosing the datatype, we must fill in additional information about the column or array of columns it represents. The table headers below display all available options for each datatype. For a string property, this includes a unique name , an integer value for the index (where 0 represents the first column, 1 represents the second, and so on), a human-readable description , a standard vocabulary term for the value-url , and a regular expression for the data pattern in that column. While the first three options are required, the rest are optional. Datatype name index description value-url pattern items-datatype min-items max-items unique-items string required required required optional optional number required required required optional integer required required required optional array required required required optional required optional optional optional boolean required required required optional To view all available options and arguments, including those for the string datatype, we can use the command fairscape-cli schema add-property string --help , which will display a complete list of options. fairscape-cli schema add-property string [ OPTIONS ] SCHEMA_FILE Options: --name TEXT [ required ] --index INTEGER [ required ] --description TEXT [ required ] --value-url TEXT --pattern TEXT --help Show this message and exit.","title":"Populate schema"},{"location":"schema-metadata/#add-a-string-property","text":"Columns index 0 and 1 have string values. Both can be constrained with an optional regex pattern. For our first column we have the experiment identifier, and add this to the schema with the following command. fairscape-cli schema add-property string \\ --name 'Experiment Identifier' \\ --index 0 \\ --description 'Identifier for the APMS experiment responsible for generating the raw PPI used to create this embedding vector' \\ --pattern '^APMS_[0-9]*$' \\ ./schema_apms_music_embedding.json For the second column we have Gene Symbols for values, We can choose then to provide the optional flag --value-url to align these values to an ontology. Using the (EDAM ontology of bioscientific data analysis and data management)[], we can specify that these are Gene Symbols. This can be usefull for specifying the Database of a particular Gene Identifier. Which enables linking Identifiers across databases. Any ontology can be used to align data. fairscape-cli schema add-property string \\ --name 'Gene Symbol' \\ --index 1 \\ --description 'Gene Symbol for the APMS bait protien' \\ --pattern '^[A-Za-z0-9\\-]*$' \\ --value-url 'http://edamontology.org/data_1026' \\ ./schema_apms_music_embedding.json","title":"Add a String Property"},{"location":"schema-metadata/#add-an-array-property","text":"Instead of registering properties for 1024 individual columns we can add a property for an array of 1024 elements. We can accomplish this with a slice expression for the index. The following slice expressions are supported. Slice Expression Description i:: starting at index i to the final index ::i starting at index 0 to index i i:j starting at index i to index j We then must specify that the type of the data inside this array is numeric. Items are not contstrained to unique values. And that for every row we expect there to be exactly 1024 elements. fairscape-cli schema add-property array \\ --name 'MUSIC APMS Embedding' \\ --index '2::' \\ --description 'Embedding Vector values for genes determined by running node2vec on APMS PPI networks. Vector has 1024 values for each bait protien' \\ --items-datatype 'number' \\ --unique-items False \\ --min-items 1024 \\ --max-items 1024 \\ ./schema_apms_music_embedding.json","title":"Add an Array Property"},{"location":"schema-metadata/#generated-schema","text":"Looking at our schema we should have a json document equivalent to the following { \"@context\" : { \"@vocab\" : \"https://schema.org/\" , \"EVI\" : \"https://w3,org/EVI#\" }, \"@id\" : \"ark:59852/schema-apms-music-embedding-izNjXSs\" , \"@type\" : \"EVI:Schema\" , \"name\" : \"APMS Embedding Schema\" , \"description\" : \"Tabular format for APMS music embeddings from PPI networks from the music pipeline from the B2AI Cellmaps for AI project\" , \"properties\" : { \"Experiment Identifier\" : { \"description\" : \"Identifier for the APMS experiment responsible for generating the raw PPI used to create this embedding vector\" , \"index\" : 0 , \"valueURL\" : null , \"type\" : \"string\" , \"pattern\" : \"^APMS_[0-9]*$\" }, \"Gene Symbol\" : { \"description\" : \"Gene Symbol for the APMS bait protien\" , \"index\" : 1 , \"valueURL\" : \"http://edamontology.org/data_1026\" , \"type\" : \"string\" , \"pattern\" : \"^[A-Za-z0-9\\-]*$\" }, \"MUSIC APMS Embedding\" : { \"description\" : \"Embedding Vector values for genes determined by running node2vec on APMS PPI networks. Vector has 1024 values for each bait protien\" , \"index\" : \"2::\" , \"valueURL\" : null , \"type\" : \"array\" , \"maxItems\" : 1024 , \"minItems\" : 1024 , \"uniqueItems\" : false , \"items\" : { \"type\" : \"number\" } } }, \"type\" : \"object\" , \"additionalProperties\" : true , \"required\" : [ \"Experiment Identifier\" , \"Gene Symbol\" , \"MUSIC APMS Embedding\" ], \"seperator\" : \",\" , \"header\" : false , \"examples\" : [] }","title":"Generated schema"},{"location":"schema-metadata/#validate-schema","text":"With our schema we can execute the validation rules against some example data, and explore how errors are reported. In the github repo, example data is provided to evaluate the same schema we have just created. When validating against data where every row conforms to the schema, a simple success message is displayed. fairscape-cli schema validate \\ --data ./examples/schemas/MUSIC_embedding/APMS_embedding_MUSIC.csv \\ --schema ./examples/schemas/MUSIC_embedding/music_apms_embedding_schema.json Validation Success However when validating against data that contains issues, a table of errors is printed out. For this purpose we provide some intentionally corrupted data to demonstrate how these errors are reported. fairscape-cli schema validate \\ --data examples/schemas/MUSIC_embedding/APMS_embedding_corrupted.csv \\ --schema examples/schemas/MUSIC_embedding/music_apms_embedding_schema.json +-----+-----------------+----------------+-------------------------------------------------------+ | row | error_type | failed_keyword | message | +-----+-----------------+----------------+-------------------------------------------------------+ | 3 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 3 | | 4 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 4 | | 0 | ValidationError | pattern | 'APMS_A' does not match '^APMS_[0-9]*$' | | 1 | ValidationError | pattern | ' -8- ' does not match '^[A-Z0-9]*$' | | 2 | ValidationError | pattern | '-`~' does not match '^[A-Z0-9]*$' | +-----+-----------------+----------------+-------------------------------------------------------+ When errors are found there are two sources of these errors. Parsing errors which occur when attempting convert a row of tabular data into the specified json structure. This can happen when either the number of specified rows is incorrect, or the data for a specific column cannot be coerced to the datatype specified of the schema. When this occurs the row is marked as a failure and reported as a ParsingError. Rows that report a ParsingError are not validated against the jsonschema. Validation Errors occur when a data element violates the contraints specified by the schema. In our example we show multiple examples of strings that defy the regex specified by the pattern attribute. Other constraints include min and max for numeric and integer properties, length for string, etc. In future work we will expand to cover the entire json schema specification.","title":"Validate schema"},{"location":"schema-metadata/#using-default-schemas","text":"For conveineince a collection of default schemas are provided for the Cell Maps for AI pipeline . These schemas have their own repo , and will track the progress of the pipeline as new data modalities are added. These default schemas are packaged and provided as part of the fairscape-cli, and can be implemented using the respective identifier for the schema. Examples for all of the existing default schemas are provided below. # validate imageloader files fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/imageloader/samplescopy.csv\" \\ --schema \"ark:59852/schema-cm4ai-imageloader-samplescopy\" fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/imageloader/uniquecopy.csv\" \\ --schema \"ark:59852/schema-cm4ai-imageloader-uniquecopy\" # validate image embedding outputs fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/image_embedding/image_emd.tsv\" \\ --schema \"ark:59852/schema-cm4ai-image-embedding-image-emd\" fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/image_embedding/labels_prob.tsv\" \\ --schema \"ark:59852/schema-cm4ai-image-embedding-labels-prob\" # validate apsm loader input fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/apmsloader/ppi_gene_node_attributes.tsv\" \\ --schema \"ark:59852/schema-cm4ai-apmsloader-gene-node-attributes\" fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/apmsloader/ppi_edgelist.tsv\" \\ --schema \"ark:59852/schema-cm4ai-apmsloader-ppi-edgelist\" # validate apms embedding fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/apms_embedding/ppi_emd.tsv\" \\ --schema \"ark:59852/schema-cm4ai-apms-embedding\" # validate coembedding fairscape-cli schema validate \\ --data \"examples/schemas/cm4ai-rocrates/coembedding/coembedding_emd.tsv\" \\ --schema \"ark:59852/schema-cm4ai-coembedding\"","title":"Using default schemas"},{"location":"setup/","text":"The CLI is compatible with Python 3.8+. Installation of the CLI requires pip to be installed. In order to install from the source git is required. python 3.8+ pip git Installation \u00b6 fairscape-cli can be installed by any of the following three options: Install with pip \u00b6 fairscape-cli is available on PyPi . Installation using pip is simple: pip install fairscape-cli Install from the source \u00b6 Clone the repository from Github git clone https://github.com/fairscape/fairscape-cli.git Go to the repository cd fairscape-cli Install using pip pip install . Test the CLI \u00b6 Show all commands, arguments, and options fairscape-cli --help or if you cloned the repository python3 src/fairscape_cli/__main__.py --help To use fairscape-cli go to the page Getting Started .","title":"Setup"},{"location":"setup/#installation","text":"fairscape-cli can be installed by any of the following three options:","title":"Installation"},{"location":"setup/#install-with-pip","text":"fairscape-cli is available on PyPi . Installation using pip is simple: pip install fairscape-cli","title":"Install with pip"},{"location":"setup/#install-from-the-source","text":"Clone the repository from Github git clone https://github.com/fairscape/fairscape-cli.git Go to the repository cd fairscape-cli Install using pip pip install .","title":"Install from the source"},{"location":"setup/#test-the-cli","text":"Show all commands, arguments, and options fairscape-cli --help or if you cloned the repository python3 src/fairscape_cli/__main__.py --help To use fairscape-cli go to the page Getting Started .","title":"Test the CLI"},{"location":"commands/build/","text":"Build Commands \u00b6 This document provides detailed information about the build commands available in fairscape-cli. Overview \u00b6 The build command group provides operations for generating derived artifacts from RO-Crates and creating release packages. These artifacts include datasheets, visualizations, evidence graphs, and release RO-Crates that make the content more accessible and understandable. fairscape-cli build [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 datasheet - Generate an HTML datasheet for an RO-Crate evidence-graph - Generate a provenance graph for a specific ARK identifier release - Build a release RO-Crate from a directory containing multiple RO-Crates Command Details \u00b6 datasheet \u00b6 Generate an HTML datasheet for an RO-Crate, providing a human-readable summary of its content. fairscape-cli build datasheet [ OPTIONS ] ROCRATE_PATH Arguments: ROCRATE_PATH - Path to the RO-Crate directory or metadata file [required] Options: --output PATH - Output HTML file path (defaults to ro-crate-datasheet.html in crate directory) --template-dir PATH - Custom template directory --published - Indicate if the crate is considered published (may affect template rendering) Example: fairscape-cli build datasheet ./my_rocrate This command: Reads the RO-Crate metadata Processes any subcrates Generates a comprehensive HTML datasheet Saves the datasheet in the specified location (or default location) The datasheet includes: General metadata (title, authors, description) Datasets included in the crate Software included in the crate Computations documented in the crate Provenance relationships between elements References to external resources Information about subcrates (if any) evidence-graph \u00b6 Generate a provenance graph for a specific ARK identifier within an RO-Crate. fairscape-cli build evidence-graph [ OPTIONS ] ROCRATE_PATH ARK_ID Arguments: ROCRATE_PATH - Path to the RO-Crate directory or metadata file [required] ARK_ID - ARK identifier for which to build the evidence graph [required] Options: --output-file PATH - Path to save the JSON evidence graph (defaults to provenance-graph.json in the RO-Crate directory) Example: fairscape-cli build evidence-graph \\ ./my_rocrate \\ ark:59852/dataset-output-dataset-xDNPTmwoHl This command: Reads the RO-Crate metadata Identifies all relationships involving the specified ARK identifier Builds a graph representing the provenance of the entity Generates both JSON and HTML visualizations of the graph Updates the RO-Crate metadata to reference the evidence graph The evidence graph shows: Inputs used to create the entity Software used in the computations Computations that generated or used the entity Derived datasets or outputs All relevant metadata for each node in the graph The HTML visualization provides an interactive graph that can be viewed in a web browser, making it easy to explore the provenance of datasets, software, and computations in the RO-Crate. release \u00b6 Build a release RO-Crate in a directory, scanning for and linking existing sub-RO-Crates. This creates a parent RO-Crate that references and contextualizes the sub-crates. fairscape-cli build release [ OPTIONS ] RELEASE_DIRECTORY Arguments: RELEASE_DIRECTORY - Directory where the release RO-Crate will be built [required] Options: --guid TEXT - GUID for the parent release RO-Crate (generated if not provided) --name TEXT - Name for the parent release RO-Crate [required] --organization-name TEXT - Organization name associated with the release [required] --project-name TEXT - Project name associated with the release [required] --description TEXT - Description of the release RO-Crate [required] --keywords TEXT - Keywords for the release RO-Crate (can be used multiple times) [required] --license TEXT - License URL for the release (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date (ISO format, defaults to current date) --author TEXT - Author(s) of the release (defaults to combined authors from subcrates) --version TEXT - Version of the release (default: \"1.0\") --associated-publication TEXT - Associated publications for the release (can be used multiple times) --conditions-of-access TEXT - Conditions of access for the release --copyright-notice TEXT - Copyright notice for the release --doi TEXT - DOI identifier for the release --publisher TEXT - Publisher of the release --principal-investigator TEXT - Principal investigator for the release --contact-email TEXT - Contact email for the release --confidentiality-level TEXT - Confidentiality level for the release --citation TEXT - Citation for the release --funder TEXT - Funder of the release --usage-info TEXT - Usage information for the release --content-size TEXT - Content size of the release --completeness TEXT - Completeness information for the release --maintenance-plan TEXT - Maintenance plan for the release --intended-use TEXT - Intended use of the release --limitations TEXT - Limitations of the release --prohibited-uses TEXT - Prohibited uses of the release --potential-sources-of-bias TEXT - Potential sources of bias in the release --human-subject TEXT - Human subject involvement information --ethical-review TEXT - Ethical review information --rai-data-collection TEXT - RAI: Description of the data collection process --rai-data-collection-type TEXT - RAI: Type of data collection (e.g., 'Web Scraping', 'Surveys') (can be used multiple times) --rai-missing-data-desc TEXT - RAI: Description of missing data in the dataset --rai-raw-data-source TEXT - RAI: Description of the raw data source --rai-collection-start-date TEXT - RAI: Start date of the data collection process (ISO format) --rai-collection-end-date TEXT - RAI: End date of the data collection process (ISO format) --rai-imputation-protocol TEXT - RAI: Description of the data imputation process --rai-manipulation-protocol TEXT - RAI: Description of the data manipulation process --rai-preprocessing-protocol TEXT - RAI: Steps taken to preprocess the data for ML use (can be used multiple times) --rai-annotation-protocol TEXT - RAI: Description of the annotation process (e.g., workforce, tasks) --rai-annotation-platform TEXT - RAI: Platform or tool used for human annotation (can be used multiple times) --rai-annotation-analysis TEXT - RAI: Analysis of annotations (e.g., disagreement resolution) (can be used multiple times) --rai-sensitive-info TEXT - RAI: Description of any personal or sensitive information (can be used multiple times) --rai-social-impact TEXT - RAI: Discussion of the dataset's potential social impact --rai-annotations-per-item TEXT - RAI: Number of human labels per dataset item --rai-annotator-demographics TEXT - RAI: Demographic specifications about the annotators (can be used multiple times) --rai-machine-annotation-tools TEXT - RAI: Software used for automated data annotation (can be used multiple times) --additional-properties TEXT - JSON string with additional property values --custom-properties TEXT - JSON string with additional properties for the parent crate Example: fairscape-cli build release ./my_release \\ --guid \"ark:59852/example-release-2023\" \\ --name \"SRA Genomic Data Example Release - 2023\" \\ --organization-name \"Example Research Institute\" \\ --project-name \"Genomic Data Analysis Project\" \\ --description \"This dataset contains genomic data from multiple sources prepared as AI-ready datasets in RO-Crate format.\" \\ --keywords \"Genomics\" \\ --keywords \"SRA\" \\ --keywords \"RNA-seq\" \\ --license \"https://creativecommons.org/licenses/by/4.0/\" \\ --publisher \"University Example Dataverse\" \\ --principal-investigator \"Dr. Example PI\" \\ --contact-email \"example@example.org\" \\ --confidentiality-level \"HL7 Unrestricted\" \\ --funder \"Example Agency\" \\ --citation \"Example Research Institute (2023). Genomic Data Example Release.\" \\ --rai-data-collection \"Data collected via automated web scraping of public repositories\" \\ --rai-data-collection-type \"Web Scraping\" \\ --rai-data-collection-type \"API Access\" \\ --rai-collection-start-date \"2023-01-01T00:00:00Z\" \\ --rai-collection-end-date \"2023-12-31T23:59:59Z\" \\ --rai-preprocessing-protocol \"Quality filtering removed low-quality sequences\" \\ --rai-preprocessing-protocol \"Normalization applied to expression values\" This command: Creates a new parent RO-Crate in the specified directory Scans the directory for existing RO-Crates to include as subcrates Links the subcrates to the parent crate Combines metadata from subcrates and the provided options Outputs the ARK identifier of the created release RO-Crate Release Workflow \u00b6 A typical release workflow involves: Create individual RO-Crates for specific datasets, software, and computations Place these RO-Crates in a common directory structure Build a release using the build release command to create a parent RO-Crate Generate a datasheet using the build datasheet command Publish the release using the publish commands The parent release RO-Crate provides context and relationships between the individual RO-Crates, making it easier to understand and work with complex datasets that span multiple files, processes, and research objects. RAI (Responsible AI) Metadata \u00b6 The release command supports extensive RAI metadata properties following the Croissant RAI Specification v1.0 (http://mlcommons.org/croissant/RAI/1.0). These properties enable comprehensive documentation of dataset lifecycle, annotation processes, and responsible use considerations. Data Lifecycle Properties \u00b6 Collection Process: --rai-data-collection - Description of the data collection process --rai-data-collection-type - Collection method types (multiple values). Recommended values: Surveys, Secondary Data analysis, Physical data collection, Direct measurement, Document analysis, Manual Human Curator, Software Collection, Experiments, Web Scraping, Web API, Focus groups, Self-reporting, Customer feedback data, User-generated content data, Passive Data Collection, Others --rai-missing-data-desc - Description of missing data in structured/unstructured form --rai-raw-data-source - Description of the raw data source --rai-collection-start-date / --rai-collection-end-date - Timeframe in terms of start and end date of the collection process (ISO format) Data Processing: --rai-imputation-protocol - Description of data imputation process if applicable --rai-manipulation-protocol - Description of data manipulation process if applicable --rai-preprocessing-protocol - Description of steps required to bring collected data to a state processable by ML models/algorithms (multiple values) Annotation and Labeling Properties \u00b6 Annotation Process: --rai-annotation-protocol - Description of annotations (labels, ratings) produced, including creation process - Annotation Workforce Type, Characteristics, Descriptions, Tasks, Distributions --rai-annotation-platform - Platform, tool, or library used to collect annotations by human annotators (multiple values) --rai-annotation-analysis - Considerations for converting \"raw\" annotations into final dataset labels, including uncertainty/disagreement analysis, systematic differences between annotator groups (multiple values) --rai-annotations-per-item - Number of human labels per dataset item --rai-annotator-demographics - List of demographic specifications about the annotators (multiple values) --rai-machine-annotation-tools - List of software used for data annotation (e.g., concept extraction, NER) to enable replication or extension (multiple values) Safety and Fairness Properties \u00b6 Responsible Use: --rai-social-impact - Discussion of social impact, if applicable --potential-sources-of-bias - Description of biases in dataset, if applicable (multiple values) --limitations - Known limitations - Data generalization limits and non-recommended uses (multiple values) --intended-use - Dataset uses - Training, Testing, Validation, Development, Production, Fine Tuning, Others. Usage Guidelines and recommended uses (multiple values) --rai-sensitive-info - Sensitive Human Attributes - Gender, Socio-economic status, Geography, Language, Age, Culture, Experience or Seniority, Others (multiple values) Compliance and Maintenance Properties \u00b6 Dataset Management: --maintenance-plan - Versioning information including updating timeframe, maintainers, and deprecation policies (multiple values) These RAI properties align with use cases including data lifecycle documentation, annotation transparency, participatory data practices, AI safety evaluation, and regulatory compliance requirements. Metadata Inheritance \u00b6 When building a release, metadata is handled in the following ways: Author information is combined from all subcrates unless explicitly provided Keywords include both the specified keywords and those from subcrates Version defaults to \"1.0\" unless specified License defaults to CC-BY 4.0 unless specified Publication date defaults to the current date unless specified RAI properties are only included when explicitly provided All other metadata must be explicitly provided through the command options.","title":"Build"},{"location":"commands/build/#build-commands","text":"This document provides detailed information about the build commands available in fairscape-cli.","title":"Build Commands"},{"location":"commands/build/#overview","text":"The build command group provides operations for generating derived artifacts from RO-Crates and creating release packages. These artifacts include datasheets, visualizations, evidence graphs, and release RO-Crates that make the content more accessible and understandable. fairscape-cli build [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/build/#available-commands","text":"datasheet - Generate an HTML datasheet for an RO-Crate evidence-graph - Generate a provenance graph for a specific ARK identifier release - Build a release RO-Crate from a directory containing multiple RO-Crates","title":"Available Commands"},{"location":"commands/build/#command-details","text":"","title":"Command Details"},{"location":"commands/build/#datasheet","text":"Generate an HTML datasheet for an RO-Crate, providing a human-readable summary of its content. fairscape-cli build datasheet [ OPTIONS ] ROCRATE_PATH Arguments: ROCRATE_PATH - Path to the RO-Crate directory or metadata file [required] Options: --output PATH - Output HTML file path (defaults to ro-crate-datasheet.html in crate directory) --template-dir PATH - Custom template directory --published - Indicate if the crate is considered published (may affect template rendering) Example: fairscape-cli build datasheet ./my_rocrate This command: Reads the RO-Crate metadata Processes any subcrates Generates a comprehensive HTML datasheet Saves the datasheet in the specified location (or default location) The datasheet includes: General metadata (title, authors, description) Datasets included in the crate Software included in the crate Computations documented in the crate Provenance relationships between elements References to external resources Information about subcrates (if any)","title":"datasheet"},{"location":"commands/build/#evidence-graph","text":"Generate a provenance graph for a specific ARK identifier within an RO-Crate. fairscape-cli build evidence-graph [ OPTIONS ] ROCRATE_PATH ARK_ID Arguments: ROCRATE_PATH - Path to the RO-Crate directory or metadata file [required] ARK_ID - ARK identifier for which to build the evidence graph [required] Options: --output-file PATH - Path to save the JSON evidence graph (defaults to provenance-graph.json in the RO-Crate directory) Example: fairscape-cli build evidence-graph \\ ./my_rocrate \\ ark:59852/dataset-output-dataset-xDNPTmwoHl This command: Reads the RO-Crate metadata Identifies all relationships involving the specified ARK identifier Builds a graph representing the provenance of the entity Generates both JSON and HTML visualizations of the graph Updates the RO-Crate metadata to reference the evidence graph The evidence graph shows: Inputs used to create the entity Software used in the computations Computations that generated or used the entity Derived datasets or outputs All relevant metadata for each node in the graph The HTML visualization provides an interactive graph that can be viewed in a web browser, making it easy to explore the provenance of datasets, software, and computations in the RO-Crate.","title":"evidence-graph"},{"location":"commands/build/#release","text":"Build a release RO-Crate in a directory, scanning for and linking existing sub-RO-Crates. This creates a parent RO-Crate that references and contextualizes the sub-crates. fairscape-cli build release [ OPTIONS ] RELEASE_DIRECTORY Arguments: RELEASE_DIRECTORY - Directory where the release RO-Crate will be built [required] Options: --guid TEXT - GUID for the parent release RO-Crate (generated if not provided) --name TEXT - Name for the parent release RO-Crate [required] --organization-name TEXT - Organization name associated with the release [required] --project-name TEXT - Project name associated with the release [required] --description TEXT - Description of the release RO-Crate [required] --keywords TEXT - Keywords for the release RO-Crate (can be used multiple times) [required] --license TEXT - License URL for the release (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date (ISO format, defaults to current date) --author TEXT - Author(s) of the release (defaults to combined authors from subcrates) --version TEXT - Version of the release (default: \"1.0\") --associated-publication TEXT - Associated publications for the release (can be used multiple times) --conditions-of-access TEXT - Conditions of access for the release --copyright-notice TEXT - Copyright notice for the release --doi TEXT - DOI identifier for the release --publisher TEXT - Publisher of the release --principal-investigator TEXT - Principal investigator for the release --contact-email TEXT - Contact email for the release --confidentiality-level TEXT - Confidentiality level for the release --citation TEXT - Citation for the release --funder TEXT - Funder of the release --usage-info TEXT - Usage information for the release --content-size TEXT - Content size of the release --completeness TEXT - Completeness information for the release --maintenance-plan TEXT - Maintenance plan for the release --intended-use TEXT - Intended use of the release --limitations TEXT - Limitations of the release --prohibited-uses TEXT - Prohibited uses of the release --potential-sources-of-bias TEXT - Potential sources of bias in the release --human-subject TEXT - Human subject involvement information --ethical-review TEXT - Ethical review information --rai-data-collection TEXT - RAI: Description of the data collection process --rai-data-collection-type TEXT - RAI: Type of data collection (e.g., 'Web Scraping', 'Surveys') (can be used multiple times) --rai-missing-data-desc TEXT - RAI: Description of missing data in the dataset --rai-raw-data-source TEXT - RAI: Description of the raw data source --rai-collection-start-date TEXT - RAI: Start date of the data collection process (ISO format) --rai-collection-end-date TEXT - RAI: End date of the data collection process (ISO format) --rai-imputation-protocol TEXT - RAI: Description of the data imputation process --rai-manipulation-protocol TEXT - RAI: Description of the data manipulation process --rai-preprocessing-protocol TEXT - RAI: Steps taken to preprocess the data for ML use (can be used multiple times) --rai-annotation-protocol TEXT - RAI: Description of the annotation process (e.g., workforce, tasks) --rai-annotation-platform TEXT - RAI: Platform or tool used for human annotation (can be used multiple times) --rai-annotation-analysis TEXT - RAI: Analysis of annotations (e.g., disagreement resolution) (can be used multiple times) --rai-sensitive-info TEXT - RAI: Description of any personal or sensitive information (can be used multiple times) --rai-social-impact TEXT - RAI: Discussion of the dataset's potential social impact --rai-annotations-per-item TEXT - RAI: Number of human labels per dataset item --rai-annotator-demographics TEXT - RAI: Demographic specifications about the annotators (can be used multiple times) --rai-machine-annotation-tools TEXT - RAI: Software used for automated data annotation (can be used multiple times) --additional-properties TEXT - JSON string with additional property values --custom-properties TEXT - JSON string with additional properties for the parent crate Example: fairscape-cli build release ./my_release \\ --guid \"ark:59852/example-release-2023\" \\ --name \"SRA Genomic Data Example Release - 2023\" \\ --organization-name \"Example Research Institute\" \\ --project-name \"Genomic Data Analysis Project\" \\ --description \"This dataset contains genomic data from multiple sources prepared as AI-ready datasets in RO-Crate format.\" \\ --keywords \"Genomics\" \\ --keywords \"SRA\" \\ --keywords \"RNA-seq\" \\ --license \"https://creativecommons.org/licenses/by/4.0/\" \\ --publisher \"University Example Dataverse\" \\ --principal-investigator \"Dr. Example PI\" \\ --contact-email \"example@example.org\" \\ --confidentiality-level \"HL7 Unrestricted\" \\ --funder \"Example Agency\" \\ --citation \"Example Research Institute (2023). Genomic Data Example Release.\" \\ --rai-data-collection \"Data collected via automated web scraping of public repositories\" \\ --rai-data-collection-type \"Web Scraping\" \\ --rai-data-collection-type \"API Access\" \\ --rai-collection-start-date \"2023-01-01T00:00:00Z\" \\ --rai-collection-end-date \"2023-12-31T23:59:59Z\" \\ --rai-preprocessing-protocol \"Quality filtering removed low-quality sequences\" \\ --rai-preprocessing-protocol \"Normalization applied to expression values\" This command: Creates a new parent RO-Crate in the specified directory Scans the directory for existing RO-Crates to include as subcrates Links the subcrates to the parent crate Combines metadata from subcrates and the provided options Outputs the ARK identifier of the created release RO-Crate","title":"release"},{"location":"commands/build/#release-workflow","text":"A typical release workflow involves: Create individual RO-Crates for specific datasets, software, and computations Place these RO-Crates in a common directory structure Build a release using the build release command to create a parent RO-Crate Generate a datasheet using the build datasheet command Publish the release using the publish commands The parent release RO-Crate provides context and relationships between the individual RO-Crates, making it easier to understand and work with complex datasets that span multiple files, processes, and research objects.","title":"Release Workflow"},{"location":"commands/build/#rai-responsible-ai-metadata","text":"The release command supports extensive RAI metadata properties following the Croissant RAI Specification v1.0 (http://mlcommons.org/croissant/RAI/1.0). These properties enable comprehensive documentation of dataset lifecycle, annotation processes, and responsible use considerations.","title":"RAI (Responsible AI) Metadata"},{"location":"commands/build/#data-lifecycle-properties","text":"Collection Process: --rai-data-collection - Description of the data collection process --rai-data-collection-type - Collection method types (multiple values). Recommended values: Surveys, Secondary Data analysis, Physical data collection, Direct measurement, Document analysis, Manual Human Curator, Software Collection, Experiments, Web Scraping, Web API, Focus groups, Self-reporting, Customer feedback data, User-generated content data, Passive Data Collection, Others --rai-missing-data-desc - Description of missing data in structured/unstructured form --rai-raw-data-source - Description of the raw data source --rai-collection-start-date / --rai-collection-end-date - Timeframe in terms of start and end date of the collection process (ISO format) Data Processing: --rai-imputation-protocol - Description of data imputation process if applicable --rai-manipulation-protocol - Description of data manipulation process if applicable --rai-preprocessing-protocol - Description of steps required to bring collected data to a state processable by ML models/algorithms (multiple values)","title":"Data Lifecycle Properties"},{"location":"commands/build/#annotation-and-labeling-properties","text":"Annotation Process: --rai-annotation-protocol - Description of annotations (labels, ratings) produced, including creation process - Annotation Workforce Type, Characteristics, Descriptions, Tasks, Distributions --rai-annotation-platform - Platform, tool, or library used to collect annotations by human annotators (multiple values) --rai-annotation-analysis - Considerations for converting \"raw\" annotations into final dataset labels, including uncertainty/disagreement analysis, systematic differences between annotator groups (multiple values) --rai-annotations-per-item - Number of human labels per dataset item --rai-annotator-demographics - List of demographic specifications about the annotators (multiple values) --rai-machine-annotation-tools - List of software used for data annotation (e.g., concept extraction, NER) to enable replication or extension (multiple values)","title":"Annotation and Labeling Properties"},{"location":"commands/build/#safety-and-fairness-properties","text":"Responsible Use: --rai-social-impact - Discussion of social impact, if applicable --potential-sources-of-bias - Description of biases in dataset, if applicable (multiple values) --limitations - Known limitations - Data generalization limits and non-recommended uses (multiple values) --intended-use - Dataset uses - Training, Testing, Validation, Development, Production, Fine Tuning, Others. Usage Guidelines and recommended uses (multiple values) --rai-sensitive-info - Sensitive Human Attributes - Gender, Socio-economic status, Geography, Language, Age, Culture, Experience or Seniority, Others (multiple values)","title":"Safety and Fairness Properties"},{"location":"commands/build/#compliance-and-maintenance-properties","text":"Dataset Management: --maintenance-plan - Versioning information including updating timeframe, maintainers, and deprecation policies (multiple values) These RAI properties align with use cases including data lifecycle documentation, annotation transparency, participatory data practices, AI safety evaluation, and regulatory compliance requirements.","title":"Compliance and Maintenance Properties"},{"location":"commands/build/#metadata-inheritance","text":"When building a release, metadata is handled in the following ways: Author information is combined from all subcrates unless explicitly provided Keywords include both the specified keywords and those from subcrates Version defaults to \"1.0\" unless specified License defaults to CC-BY 4.0 unless specified Publication date defaults to the current date unless specified RAI properties are only included when explicitly provided All other metadata must be explicitly provided through the command options.","title":"Metadata Inheritance"},{"location":"commands/import/","text":"Import Commands \u00b6 This document provides detailed information about the import commands available in fairscape-cli. Overview \u00b6 The import command group provides operations for importing external data into RO-Crate format. These commands fetch data from external repositories and convert them to well-structured RO-Crates with appropriate metadata. fairscape-cli import [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 bioproject - Import data from an NCBI BioProject pep - Import a Portable Encapsulated Project (PEP) Command Details \u00b6 bioproject \u00b6 Import data from an NCBI BioProject into an RO-Crate. fairscape-cli import bioproject [ OPTIONS ] Options: --accession TEXT - NCBI BioProject accession (e.g., PRJNA12345) [required] --output-dir PATH - Directory to create the RO-Crate in [required] --author TEXT - Author name to associate with generated metadata [required] --api-key TEXT - NCBI API key (optional) --name TEXT - Override the default RO-Crate name --description TEXT - Override the default RO-Crate description --keywords TEXT - Override the default RO-Crate keywords (can be used multiple times) --license TEXT - Override the default RO-Crate license URL --version TEXT - Override the default RO-Crate version --organization-name TEXT - Set the organization name for the RO-Crate --project-name TEXT - Set the project name for the RO-Crate Example: fairscape-cli import bioproject \\ --accession \"PRJDB2884\" \\ --output-dir \"./bioproject_crate\" \\ --author \"Jane Smith\" \\ --keywords \"genomics\" \\ --keywords \"sequencing\" This command: Fetches metadata from the NCBI BioProject database Creates an RO-Crate with the BioProject metadata Registers datasets, samples, and other relevant data from the BioProject Outputs the ARK identifier of the created RO-Crate pep \u00b6 Import a Portable Encapsulated Project (PEP) into an RO-Crate. fairscape-cli import pep [ OPTIONS ] PEP_PATH Arguments: PEP_PATH - Path to the PEP directory or config file [required] Options: --output-path PATH - Path for the generated RO-Crate (defaults to PEP directory) --name TEXT - Name for the RO-Crate (overrides PEP metadata) --description TEXT - Description (overrides PEP metadata) --author TEXT - Author (overrides PEP metadata) --organization-name TEXT - Organization name --project-name TEXT - Project name --keywords TEXT - Keywords (overrides PEP metadata, can be used multiple times) --license TEXT - License URL (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date --version TEXT - Version string (default: \"1.0\") Example: fairscape-cli import pep \\ ./my_pep_project \\ --output-path ./pep_rocrate \\ --author \"John Doe\" \\ --organization-name \"University Example\" \\ --project-name \"My PEP Project\" This command: Reads the PEP project configuration Creates an RO-Crate with metadata from the PEP Outputs the ARK identifier of the created RO-Crate","title":"Import"},{"location":"commands/import/#import-commands","text":"This document provides detailed information about the import commands available in fairscape-cli.","title":"Import Commands"},{"location":"commands/import/#overview","text":"The import command group provides operations for importing external data into RO-Crate format. These commands fetch data from external repositories and convert them to well-structured RO-Crates with appropriate metadata. fairscape-cli import [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/import/#available-commands","text":"bioproject - Import data from an NCBI BioProject pep - Import a Portable Encapsulated Project (PEP)","title":"Available Commands"},{"location":"commands/import/#command-details","text":"","title":"Command Details"},{"location":"commands/import/#bioproject","text":"Import data from an NCBI BioProject into an RO-Crate. fairscape-cli import bioproject [ OPTIONS ] Options: --accession TEXT - NCBI BioProject accession (e.g., PRJNA12345) [required] --output-dir PATH - Directory to create the RO-Crate in [required] --author TEXT - Author name to associate with generated metadata [required] --api-key TEXT - NCBI API key (optional) --name TEXT - Override the default RO-Crate name --description TEXT - Override the default RO-Crate description --keywords TEXT - Override the default RO-Crate keywords (can be used multiple times) --license TEXT - Override the default RO-Crate license URL --version TEXT - Override the default RO-Crate version --organization-name TEXT - Set the organization name for the RO-Crate --project-name TEXT - Set the project name for the RO-Crate Example: fairscape-cli import bioproject \\ --accession \"PRJDB2884\" \\ --output-dir \"./bioproject_crate\" \\ --author \"Jane Smith\" \\ --keywords \"genomics\" \\ --keywords \"sequencing\" This command: Fetches metadata from the NCBI BioProject database Creates an RO-Crate with the BioProject metadata Registers datasets, samples, and other relevant data from the BioProject Outputs the ARK identifier of the created RO-Crate","title":"bioproject"},{"location":"commands/import/#pep","text":"Import a Portable Encapsulated Project (PEP) into an RO-Crate. fairscape-cli import pep [ OPTIONS ] PEP_PATH Arguments: PEP_PATH - Path to the PEP directory or config file [required] Options: --output-path PATH - Path for the generated RO-Crate (defaults to PEP directory) --name TEXT - Name for the RO-Crate (overrides PEP metadata) --description TEXT - Description (overrides PEP metadata) --author TEXT - Author (overrides PEP metadata) --organization-name TEXT - Organization name --project-name TEXT - Project name --keywords TEXT - Keywords (overrides PEP metadata, can be used multiple times) --license TEXT - License URL (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date --version TEXT - Version string (default: \"1.0\") Example: fairscape-cli import pep \\ ./my_pep_project \\ --output-path ./pep_rocrate \\ --author \"John Doe\" \\ --organization-name \"University Example\" \\ --project-name \"My PEP Project\" This command: Reads the PEP project configuration Creates an RO-Crate with metadata from the PEP Outputs the ARK identifier of the created RO-Crate","title":"pep"},{"location":"commands/publish/","text":"Publish Commands \u00b6 This document provides detailed information about the publish commands available in fairscape-cli. Overview \u00b6 The publish command group provides operations for publishing RO-Crates to external repositories and registering persistent identifiers. These commands help make your research data FAIR (Findable, Accessible, Interoperable, and Reusable) by connecting it to wider research data ecosystems. fairscape-cli publish [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 fairscape - Upload RO-Crate directory or zip file to Fairscape dataverse - Publish RO-Crate metadata as a new dataset to Dataverse doi - Mint or update a DOI on DataCite using RO-Crate metadata Command Details \u00b6 fairscape \u00b6 Upload an RO-Crate directory or zip file to a Fairscape repository. fairscape-cli publish fairscape [ OPTIONS ] Options: --rocrate PATH - Path to the RO-Crate directory or zip file [required] --username TEXT - Fairscape username (can also be set via FAIRSCAPE_USERNAME env var) [required] --password TEXT - Fairscape password (can also be set via FAIRSCAPE_PASSWORD env var) [required] --api-url TEXT - Fairscape API URL (default: \"https://fairscape.net/api\") Example: fairscape-cli publish fairscape \\ --rocrate ./my_rocrate \\ --username \"your_username\" \\ --password \"your_password\" \\ --api-url \"https://fairscape.example.org/api\" This command: Authenticates with the Fairscape repository Uploads the RO-Crate directory or zip file Registers the metadata in the repository Returns a URL to access the published RO-Crate dataverse \u00b6 Publish RO-Crate metadata as a new dataset to a Dataverse repository. fairscape-cli publish dataverse [ OPTIONS ] Options: --rocrate PATH - Path to the ro-crate-metadata.json file [required] --prefix TEXT - Your DataCite DOI prefix (e.g., \"10.1234\") [required] --username TEXT - DataCite API username (repository ID, e.g., \"MEMBER.REPO\") (can use DATACITE_USERNAME env var) [required] --password TEXT - DataCite API password (can use DATACITE_PASSWORD env var) [required] --api-url TEXT - DataCite API URL (default: \"https://api.datacite.org\", use \"https://api.test.datacite.org\" for testing) --event TEXT - DOI event type: 'publish' (make public), 'register' (create draft), 'hide' (make findable but hide metadata) [default: \"publish\"] Example: fairscape-cli publish doi \\ --rocrate ./my_rocrate/ro-crate-metadata.json \\ --prefix \"10.1234\" \\ --username \"MYORG.MYREPO\" \\ --password \"your_datacite_password\" \\ --event \"publish\" This command: Reads the RO-Crate metadata Transforms it into DataCite metadata Mints or updates a DOI on DataCite Returns the DOI URL Working with DOIs \u00b6 When working with DOIs, keep in mind: DOI States : register : Creates a draft DOI that is not yet publicly resolvable publish : Makes the DOI and its metadata public and resolvable hide : Makes the DOI resolvable but hides its metadata Testing : Use the test DataCite API URL before working with the production system: --api-url \"https://api.test.datacite.org\" Updating : To update an existing DOI, ensure the RO-Crate metadata contains the DOI in the identifier field. Integrating with Dataverse \u00b6 After minting a DOI, you can update your RO-Crate metadata with the DOI and then publish to Dataverse: # First mint a DOI fairscape-cli publish doi --rocrate ./my_rocrate/ro-crate-metadata.json ... # Then update your RO-Crate with the DOI # (This would typically be done programmatically) # Then publish to Dataverse fairscape-cli publish dataverse --rocrate ./my_rocrate/ro-crate-metadata.json ... This workflow ensures your research data is both persistently identified and accessible through established research data repositories. json file [required] --url TEXT - Base URL of the target Dataverse instance (e.g., \"https://dataverse.example.edu\") [required] --collection TEXT - Alias of the target Dataverse collection to publish into [required] --token TEXT - Dataverse API token (can also be set via DATAVERSE_API_TOKEN env var) [required] --authors-csv PATH - Optional CSV file with author details (name, affiliation, orcid). Requires \"name\" column header. Example: fairscape-cli publish dataverse \\ --rocrate ./my_rocrate/ro-crate-metadata.json \\ --url \"https://dataverse.example.edu\" \\ --collection \"my_collection\" \\ --token \"your_dataverse_api_token\" This command: Reads the RO-Crate metadata Transforms it into Dataverse dataset metadata Creates a new dataset in the specified Dataverse collection Returns the DOI of the created dataset doi \u00b6 Mint or update a DOI on DataCite using RO-Crate metadata. fairscape-cli publish doi [ OPTIONS ] Options: --rocrate PATH - Path to the ro-crate-metadata.json file [required] --prefix TEXT - Your DataCite DOI prefix (e.g., \"10.1234\") [required] --username TEXT - DataCite API username (repository ID, e.g., \"MEMBER.REPO\") (can use DATACITE_USERNAME env var) [required] --password TEXT - DataCite API password (can use DATACITE_PASSWORD env var) [required] --api-url TEXT - DataCite API URL (default: \"https://api.datacite.org\", use \"https://api.test.datacite.org\" for testing) --event TEXT - DOI event type: 'publish' (make public), 'register' (create draft), 'hide' (make findable but hide metadata) [default: \"publish\"] Example: fairscape-cli publish doi \\ --rocrate ./my_rocrate/ro-crate-metadata.","title":"Publishing"},{"location":"commands/publish/#publish-commands","text":"This document provides detailed information about the publish commands available in fairscape-cli.","title":"Publish Commands"},{"location":"commands/publish/#overview","text":"The publish command group provides operations for publishing RO-Crates to external repositories and registering persistent identifiers. These commands help make your research data FAIR (Findable, Accessible, Interoperable, and Reusable) by connecting it to wider research data ecosystems. fairscape-cli publish [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/publish/#available-commands","text":"fairscape - Upload RO-Crate directory or zip file to Fairscape dataverse - Publish RO-Crate metadata as a new dataset to Dataverse doi - Mint or update a DOI on DataCite using RO-Crate metadata","title":"Available Commands"},{"location":"commands/publish/#command-details","text":"","title":"Command Details"},{"location":"commands/publish/#fairscape","text":"Upload an RO-Crate directory or zip file to a Fairscape repository. fairscape-cli publish fairscape [ OPTIONS ] Options: --rocrate PATH - Path to the RO-Crate directory or zip file [required] --username TEXT - Fairscape username (can also be set via FAIRSCAPE_USERNAME env var) [required] --password TEXT - Fairscape password (can also be set via FAIRSCAPE_PASSWORD env var) [required] --api-url TEXT - Fairscape API URL (default: \"https://fairscape.net/api\") Example: fairscape-cli publish fairscape \\ --rocrate ./my_rocrate \\ --username \"your_username\" \\ --password \"your_password\" \\ --api-url \"https://fairscape.example.org/api\" This command: Authenticates with the Fairscape repository Uploads the RO-Crate directory or zip file Registers the metadata in the repository Returns a URL to access the published RO-Crate","title":"fairscape"},{"location":"commands/publish/#dataverse","text":"Publish RO-Crate metadata as a new dataset to a Dataverse repository. fairscape-cli publish dataverse [ OPTIONS ] Options: --rocrate PATH - Path to the ro-crate-metadata.json file [required] --prefix TEXT - Your DataCite DOI prefix (e.g., \"10.1234\") [required] --username TEXT - DataCite API username (repository ID, e.g., \"MEMBER.REPO\") (can use DATACITE_USERNAME env var) [required] --password TEXT - DataCite API password (can use DATACITE_PASSWORD env var) [required] --api-url TEXT - DataCite API URL (default: \"https://api.datacite.org\", use \"https://api.test.datacite.org\" for testing) --event TEXT - DOI event type: 'publish' (make public), 'register' (create draft), 'hide' (make findable but hide metadata) [default: \"publish\"] Example: fairscape-cli publish doi \\ --rocrate ./my_rocrate/ro-crate-metadata.json \\ --prefix \"10.1234\" \\ --username \"MYORG.MYREPO\" \\ --password \"your_datacite_password\" \\ --event \"publish\" This command: Reads the RO-Crate metadata Transforms it into DataCite metadata Mints or updates a DOI on DataCite Returns the DOI URL","title":"dataverse"},{"location":"commands/publish/#working-with-dois","text":"When working with DOIs, keep in mind: DOI States : register : Creates a draft DOI that is not yet publicly resolvable publish : Makes the DOI and its metadata public and resolvable hide : Makes the DOI resolvable but hides its metadata Testing : Use the test DataCite API URL before working with the production system: --api-url \"https://api.test.datacite.org\" Updating : To update an existing DOI, ensure the RO-Crate metadata contains the DOI in the identifier field.","title":"Working with DOIs"},{"location":"commands/publish/#integrating-with-dataverse","text":"After minting a DOI, you can update your RO-Crate metadata with the DOI and then publish to Dataverse: # First mint a DOI fairscape-cli publish doi --rocrate ./my_rocrate/ro-crate-metadata.json ... # Then update your RO-Crate with the DOI # (This would typically be done programmatically) # Then publish to Dataverse fairscape-cli publish dataverse --rocrate ./my_rocrate/ro-crate-metadata.json ... This workflow ensures your research data is both persistently identified and accessible through established research data repositories. json file [required] --url TEXT - Base URL of the target Dataverse instance (e.g., \"https://dataverse.example.edu\") [required] --collection TEXT - Alias of the target Dataverse collection to publish into [required] --token TEXT - Dataverse API token (can also be set via DATAVERSE_API_TOKEN env var) [required] --authors-csv PATH - Optional CSV file with author details (name, affiliation, orcid). Requires \"name\" column header. Example: fairscape-cli publish dataverse \\ --rocrate ./my_rocrate/ro-crate-metadata.json \\ --url \"https://dataverse.example.edu\" \\ --collection \"my_collection\" \\ --token \"your_dataverse_api_token\" This command: Reads the RO-Crate metadata Transforms it into Dataverse dataset metadata Creates a new dataset in the specified Dataverse collection Returns the DOI of the created dataset","title":"Integrating with Dataverse"},{"location":"commands/publish/#doi","text":"Mint or update a DOI on DataCite using RO-Crate metadata. fairscape-cli publish doi [ OPTIONS ] Options: --rocrate PATH - Path to the ro-crate-metadata.json file [required] --prefix TEXT - Your DataCite DOI prefix (e.g., \"10.1234\") [required] --username TEXT - DataCite API username (repository ID, e.g., \"MEMBER.REPO\") (can use DATACITE_USERNAME env var) [required] --password TEXT - DataCite API password (can use DATACITE_PASSWORD env var) [required] --api-url TEXT - DataCite API URL (default: \"https://api.datacite.org\", use \"https://api.test.datacite.org\" for testing) --event TEXT - DOI event type: 'publish' (make public), 'register' (create draft), 'hide' (make findable but hide metadata) [default: \"publish\"] Example: fairscape-cli publish doi \\ --rocrate ./my_rocrate/ro-crate-metadata.","title":"doi"},{"location":"commands/release/","text":"Release Commands \u00b6 This document provides detailed information about the release commands available in fairscape-cli. Overview \u00b6 The release command group provides operations for creating and managing release packages that combine multiple RO-Crates. This allows you to organize related RO-Crates into a cohesive collection with unified metadata and documentation. fairscape-cli release [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 build - Build a release RO-Crate from a directory containing multiple RO-Crates Command Details \u00b6 build \u00b6 Build a release RO-Crate in a directory, scanning for and linking existing sub-RO-Crates. This creates a parent RO-Crate that references and contextualizes the sub-crates. fairscape-cli release build [ OPTIONS ] RELEASE_DIRECTORY Arguments: RELEASE_DIRECTORY - Directory where the release RO-Crate will be built [required] Options: --guid TEXT - GUID for the parent release RO-Crate (generated if not provided) --name TEXT - Name for the parent release RO-Crate [required] --organization-name TEXT - Organization name associated with the release [required] --project-name TEXT - Project name associated with the release [required] --description TEXT - Description of the release RO-Crate [required] --keywords TEXT - Keywords for the release RO-Crate (can be used multiple times) [required] --license TEXT - License URL for the release (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date (ISO format, defaults to current date) --author TEXT - Author(s) of the release (defaults to combined authors from subcrates) --version TEXT - Version of the release (default: \"1.0\") --associated-publication TEXT - Associated publications for the release (can be used multiple times) --conditions-of-access TEXT - Conditions of access for the release --copyright-notice TEXT - Copyright notice for the release --doi TEXT - DOI identifier for the release --publisher TEXT - Publisher of the release --principal-investigator TEXT - Principal investigator for the release --contact-email TEXT - Contact email for the release --confidentiality-level TEXT - Confidentiality level for the release --citation TEXT - Citation for the release --funder TEXT - Funder of the release --usage-info TEXT - Usage information for the release --content-size TEXT - Content size of the release --completeness TEXT - Completeness information for the release --maintenance-plan TEXT - Maintenance plan for the release --intended-use TEXT - Intended use of the release --limitations TEXT - Limitations of the release --prohibited-uses TEXT - Prohibited uses of the release --potential-sources-of-bias TEXT - Potential sources of bias in the release --human-subject TEXT - Human subject involvement information --ethical-review TEXT - Ethical review information --additional-properties TEXT - JSON string with additional property values --custom-properties TEXT - JSON string with additional properties for the parent crate Example: fairscape-cli release build ./my_release \\ --guid \"ark:59852/example-release-2023\" \\ --name \"SRA Genomic Data Example Release - 2023\" \\ --organization-name \"Example Research Institute\" \\ --project-name \"Genomic Data Analysis Project\" \\ --description \"This dataset contains genomic data from multiple sources prepared as AI-ready datasets in RO-Crate format.\" \\ --keywords \"Genomics\" \\ --keywords \"SRA\" \\ --keywords \"RNA-seq\" \\ --license \"https://creativecommons.org/licenses/by/4.0/\" \\ --publisher \"University Example Dataverse\" \\ --principal-investigator \"Dr. Example PI\" \\ --contact-email \"example@example.org\" \\ --confidentiality-level \"HL7 Unrestricted\" \\ --funder \"Example Agency\" \\ --citation \"Example Research Institute (2023). Genomic Data Example Release.\" This command: Creates a new parent RO-Crate in the specified directory Scans the directory for existing RO-Crates to include as subcrates Links the subcrates to the parent crate Combines metadata from subcrates and the provided options Outputs the ARK identifier of the created release RO-Crate Release Workflow \u00b6 A typical release workflow involves: Create individual RO-Crates for specific datasets, software, and computations Place these RO-Crates in a common directory structure Build a release using the release build command to create a parent RO-Crate Generate a datasheet using the build datasheet command Publish the release using the publish commands The parent release RO-Crate provides context and relationships between the individual RO-Crates, making it easier to understand and work with complex datasets that span multiple files, processes, and research objects. Metadata Inheritance \u00b6 When building a release, metadata is handled in the following ways: Author information is combined from all subcrates unless explicitly provided Keywords include both the specified keywords and those from subcrates Version defaults to \"1.0\" unless specified License defaults to CC-BY 4.0 unless specified Publication date defaults to the current date unless specified All other metadata must be explicitly provided through the command options.","title":"Release Commands"},{"location":"commands/release/#release-commands","text":"This document provides detailed information about the release commands available in fairscape-cli.","title":"Release Commands"},{"location":"commands/release/#overview","text":"The release command group provides operations for creating and managing release packages that combine multiple RO-Crates. This allows you to organize related RO-Crates into a cohesive collection with unified metadata and documentation. fairscape-cli release [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/release/#available-commands","text":"build - Build a release RO-Crate from a directory containing multiple RO-Crates","title":"Available Commands"},{"location":"commands/release/#command-details","text":"","title":"Command Details"},{"location":"commands/release/#build","text":"Build a release RO-Crate in a directory, scanning for and linking existing sub-RO-Crates. This creates a parent RO-Crate that references and contextualizes the sub-crates. fairscape-cli release build [ OPTIONS ] RELEASE_DIRECTORY Arguments: RELEASE_DIRECTORY - Directory where the release RO-Crate will be built [required] Options: --guid TEXT - GUID for the parent release RO-Crate (generated if not provided) --name TEXT - Name for the parent release RO-Crate [required] --organization-name TEXT - Organization name associated with the release [required] --project-name TEXT - Project name associated with the release [required] --description TEXT - Description of the release RO-Crate [required] --keywords TEXT - Keywords for the release RO-Crate (can be used multiple times) [required] --license TEXT - License URL for the release (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date (ISO format, defaults to current date) --author TEXT - Author(s) of the release (defaults to combined authors from subcrates) --version TEXT - Version of the release (default: \"1.0\") --associated-publication TEXT - Associated publications for the release (can be used multiple times) --conditions-of-access TEXT - Conditions of access for the release --copyright-notice TEXT - Copyright notice for the release --doi TEXT - DOI identifier for the release --publisher TEXT - Publisher of the release --principal-investigator TEXT - Principal investigator for the release --contact-email TEXT - Contact email for the release --confidentiality-level TEXT - Confidentiality level for the release --citation TEXT - Citation for the release --funder TEXT - Funder of the release --usage-info TEXT - Usage information for the release --content-size TEXT - Content size of the release --completeness TEXT - Completeness information for the release --maintenance-plan TEXT - Maintenance plan for the release --intended-use TEXT - Intended use of the release --limitations TEXT - Limitations of the release --prohibited-uses TEXT - Prohibited uses of the release --potential-sources-of-bias TEXT - Potential sources of bias in the release --human-subject TEXT - Human subject involvement information --ethical-review TEXT - Ethical review information --additional-properties TEXT - JSON string with additional property values --custom-properties TEXT - JSON string with additional properties for the parent crate Example: fairscape-cli release build ./my_release \\ --guid \"ark:59852/example-release-2023\" \\ --name \"SRA Genomic Data Example Release - 2023\" \\ --organization-name \"Example Research Institute\" \\ --project-name \"Genomic Data Analysis Project\" \\ --description \"This dataset contains genomic data from multiple sources prepared as AI-ready datasets in RO-Crate format.\" \\ --keywords \"Genomics\" \\ --keywords \"SRA\" \\ --keywords \"RNA-seq\" \\ --license \"https://creativecommons.org/licenses/by/4.0/\" \\ --publisher \"University Example Dataverse\" \\ --principal-investigator \"Dr. Example PI\" \\ --contact-email \"example@example.org\" \\ --confidentiality-level \"HL7 Unrestricted\" \\ --funder \"Example Agency\" \\ --citation \"Example Research Institute (2023). Genomic Data Example Release.\" This command: Creates a new parent RO-Crate in the specified directory Scans the directory for existing RO-Crates to include as subcrates Links the subcrates to the parent crate Combines metadata from subcrates and the provided options Outputs the ARK identifier of the created release RO-Crate","title":"build"},{"location":"commands/release/#release-workflow","text":"A typical release workflow involves: Create individual RO-Crates for specific datasets, software, and computations Place these RO-Crates in a common directory structure Build a release using the release build command to create a parent RO-Crate Generate a datasheet using the build datasheet command Publish the release using the publish commands The parent release RO-Crate provides context and relationships between the individual RO-Crates, making it easier to understand and work with complex datasets that span multiple files, processes, and research objects.","title":"Release Workflow"},{"location":"commands/release/#metadata-inheritance","text":"When building a release, metadata is handled in the following ways: Author information is combined from all subcrates unless explicitly provided Keywords include both the specified keywords and those from subcrates Version defaults to \"1.0\" unless specified License defaults to CC-BY 4.0 unless specified Publication date defaults to the current date unless specified All other metadata must be explicitly provided through the command options.","title":"Metadata Inheritance"},{"location":"commands/rocrate/","text":"RO-Crate Commands \u00b6 This document provides detailed information about the RO-Crate commands available in fairscape-cli. Overview \u00b6 The rocrate command group provides operations for creating and manipulating Research Object Crates (RO-Crates). RO-Crates are a lightweight approach to packaging research data with their metadata, making them more FAIR (Findable, Accessible, Interoperable, and Reusable). fairscape-cli rocrate [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 create - Create a new RO-Crate in a specified directory init - Initialize an RO-Crate in the current working directory register - Add metadata to an existing RO-Crate dataset - Register dataset metadata software - Register software metadata computation - Register computation metadata sample - Register sample metadata instrument - Register instrument metadata experiment - Register experiment metadata subrocrate - Register a new RO-Crate within an existing RO-Crate add - Add a file to the RO-Crate and register its metadata dataset - Add a dataset file and its metadata software - Add a software file and its metadata Command Details \u00b6 create \u00b6 Create a new RO-Crate in a specified directory. fairscape-cli rocrate create [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the RO-Crate --name TEXT - Name of the RO-Crate [required] --organization-name TEXT - Name of the organization [required] --project-name TEXT - Name of the project [required] --description TEXT - Description of the RO-Crate [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --license TEXT - License URL (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date (ISO format) --author TEXT - Author name (default: \"Unknown\") --version TEXT - Version number (default: \"1.0\") --associated-publication TEXT - Associated publication --conditions-of-access TEXT - Conditions of access --copyright-notice TEXT - Copyright notice --custom-properties TEXT - JSON string with additional properties to include Example: fairscape-cli rocrate create \\ --name \"test rocrate\" \\ --description \"Example RO Crate for Tests\" \\ --organization-name \"UVA\" \\ --project-name \"B2AI\" \\ --keywords \"b2ai\" \\ --keywords \"cm4ai\" \\ \"./test_rocrate\" init \u00b6 Initialize an RO-Crate in the current working directory. fairscape-cli rocrate init [ OPTIONS ] Options: The same options as for the create command are available. The difference is that init creates the RO-Crate in the current working directory. Example: fairscape-cli rocrate init \\ --name \"test rocrate\" \\ --description \"Example RO Crate for Tests\" \\ --organization-name \"UVA\" \\ --project-name \"B2AI\" \\ --keywords \"b2ai\" \\ --keywords \"cm4ai\" register \u00b6 Add metadata to an existing RO-Crate. This command has several subcommands depending on the type of metadata to register. register dataset \u00b6 Register dataset metadata with an existing RO-Crate. fairscape-cli rocrate register dataset [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the dataset --name TEXT - Name of the dataset [required] --author TEXT - Author of the dataset [required] --version TEXT - Version of the dataset [required] --description TEXT - Description of the dataset [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --data-format TEXT - Format of the dataset (e.g., csv, json) [required] --filepath TEXT - Path to the dataset file (relative to crate root) --content-url TEXT - URL to the dataset file (if hosted externally) --embargoed - Flag indicating the dataset is embargoed (default: false) --url TEXT - URL reference for the dataset --date-published TEXT - Publication date of the dataset (ISO format) [required] --schema TEXT - Schema identifier for the dataset --used-by TEXT - Identifiers of computations that use this dataset (can be specified multiple times) --derived-from TEXT - Identifiers of datasets this one is derived from (can be specified multiple times) --generated-by TEXT - Identifiers of computations that generated this dataset (can be specified multiple times) --summary-statistics-filepath TEXT - Path to summary statistics file --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties to include File Location Options: You must specify exactly one of the following options to indicate where the dataset is located: --filepath - For datasets stored within the RO-Crate --content-url - For datasets hosted externally at a URL --embargoed - For datasets that are embargoed/restricted If multiple options are provided, they are prioritized in this order: filepath > content-url > embargoed . Example: # Register a dataset file within the crate fairscape-cli rocrate register dataset \\ --name \"AP-MS embeddings\" \\ --author \"Krogan lab\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"APMS embeddings for each protein\" \\ --keywords \"proteomics\" \\ --data-format \"CSV\" \\ --filepath \"./test_rocrate/embeddings.csv\" \\ \"./test_rocrate\" # Register an external dataset fairscape-cli rocrate register dataset \\ --name \"External Dataset\" \\ --author \"External Provider\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"Dataset hosted externally\" \\ --keywords \"external\" \\ --data-format \"CSV\" \\ --content-url \"https://example.com/dataset.csv\" \\ \"./test_rocrate\" # Register an embargoed dataset fairscape-cli rocrate register dataset \\ --name \"Embargoed Dataset\" \\ --author \"Research Team\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"Dataset under embargo\" \\ --keywords \"embargoed\" \\ --data-format \"CSV\" \\ --embargoed \\ \"./test_rocrate\" register software \u00b6 Register software metadata with an existing RO-Crate. fairscape-cli rocrate register software [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the software --name TEXT - Name of the software [required] --author TEXT - Author of the software [required] --version TEXT - Version of the software [required] --description TEXT - Description of the software [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --file-format TEXT - Format of the software (e.g., py, js) [required] --url TEXT - URL reference for the software --date-modified TEXT - Last modification date of the software (ISO format) --filepath TEXT - Path to the software file (relative to crate root) --content-url TEXT - URL to the software file (if hosted externally) --embargoed - Flag indicating the software is embargoed (default: false) --used-by-computation TEXT - Identifiers of computations that use this software (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties File Location Options: You must specify exactly one of the following options to indicate where the software is located: --filepath - For software stored within the RO-Crate --content-url - For software hosted externally at a URL --embargoed - For software that is embargoed/restricted If multiple options are provided, they are prioritized in this order: filepath > content-url > embargoed . Example: # Register software file within the crate fairscape-cli rocrate register software \\ --name \"calibrate pairwise distance\" \\ --author \"Qin, Y.\" \\ --version \"1.0\" \\ --description \"script written in python to calibrate pairwise distance.\" \\ --keywords \"b2ai\" \\ --file-format \"py\" \\ --filepath \"./test_rocrate/calibrate_pairwise_distance.py\" \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\" # Register external software fairscape-cli rocrate register software \\ --name \"External Analysis Tool\" \\ --author \"External Developer\" \\ --version \"2.1\" \\ --description \"Analysis tool hosted on GitHub\" \\ --keywords \"analysis\" \\ --file-format \"py\" \\ --content-url \"https://github.com/user/repo/blob/main/analysis.py\" \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\" # Register embargoed software fairscape-cli rocrate register software \\ --name \"Proprietary Algorithm\" \\ --author \"Research Team\" \\ --version \"1.0\" \\ --description \"Proprietary analysis algorithm\" \\ --keywords \"proprietary\" \\ --file-format \"py\" \\ --embargoed \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\" register computation \u00b6 Register computation metadata with an existing RO-Crate. fairscape-cli rocrate register computation [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the computation --name TEXT - Name of the computation [required] --run-by TEXT - Person or entity that ran the computation [required] --command TEXT - Command used to run the computation (string or JSON list) --date-created TEXT - Date the computation was run (ISO format) [required] --description TEXT - Description of the computation [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --used-software TEXT - Software identifiers used by this computation (can be specified multiple times) --used-dataset TEXT - Dataset identifiers used by this computation (can be specified multiple times) --generated TEXT - Dataset/Software identifiers generated by this computation (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register computation \\ --name \"calibrate pairwise distance\" \\ --run-by \"Qin, Y.\" \\ --date-created \"2023-05-23\" \\ --description \"Average the predicted proximities\" \\ --keywords \"b2ai\" \\ --keywords \"cm4ai\" \\ \"./test_rocrate\" register sample \u00b6 Register sample metadata with an existing RO-Crate. fairscape-cli rocrate register sample [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the sample --name TEXT - Name of the sample [required] --author TEXT - Author or creator of the sample [required] --description TEXT - Description of the sample [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --filepath TEXT - Path to the sample documentation file --cell-line-reference TEXT - Reference to the cell line used --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register sample \\ --name \"HeLa Cell Sample\" \\ --author \"Lab Technician\" \\ --description \"HeLa cells prepared for proteomics analysis\" \\ --keywords \"cell-culture\" \\ --keywords \"proteomics\" \\ --cell-line-reference \"ATCC CCL-2\" \\ \"./test_rocrate\" register instrument \u00b6 Register instrument metadata with an existing RO-Crate. fairscape-cli rocrate register instrument [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the instrument --name TEXT - Name of the instrument [required] --manufacturer TEXT - Manufacturer of the instrument [required] --model TEXT - Model number/name of the instrument [required] --description TEXT - Description of the instrument [required] --filepath TEXT - Path to instrument documentation file --used-by-experiment TEXT - Identifiers of experiments using this instrument (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register instrument \\ --name \"Mass Spectrometer MS-1000\" \\ --manufacturer \"Thermo Fisher Scientific\" \\ --model \"Orbitrap Fusion Lumos\" \\ --description \"High-resolution mass spectrometer for proteomics\" \\ --filepath \"./instruments/ms1000_manual.pdf\" \\ \"./test_rocrate\" register experiment \u00b6 Register experiment metadata with an existing RO-Crate. fairscape-cli rocrate register experiment [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the experiment --name TEXT - Name of the experiment [required] --experiment-type TEXT - Type of experiment conducted [required] --run-by TEXT - Person or entity that ran the experiment [required] --description TEXT - Description of the experiment [required] --date-performed TEXT - Date the experiment was performed (ISO format) [required] --used-instrument TEXT - Instrument identifiers used in this experiment (can be specified multiple times) --used-sample TEXT - Sample identifiers used in this experiment (can be specified multiple times) --used-treatment TEXT - Treatment identifiers used in this experiment (can be specified multiple times) --used-stain TEXT - Stain identifiers used in this experiment (can be specified multiple times) --generated TEXT - Identifiers of entities generated by this experiment (can be specified multiple times) --protocol TEXT - Protocol identifier or description --associated-publication TEXT - Associated publication identifier --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register experiment \\ --name \"Proteomics Analysis Experiment\" \\ --experiment-type \"Mass Spectrometry\" \\ --run-by \"Research Team\" \\ --description \"Comprehensive proteomics analysis of cell samples\" \\ --date-performed \"2023-05-15\" \\ --used-instrument \"ark:/12345/instrument-1\" \\ --used-sample \"ark:/12345/sample-1\" \\ --protocol \"Standard MS Protocol v2.1\" \\ \"./test_rocrate\" register subrocrate \u00b6 Register a new RO-Crate within an existing RO-Crate directory. fairscape-cli rocrate register subrocrate [ OPTIONS ] ROCRATE_PATH SUBROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the sub-crate --name TEXT - Name of the sub-crate [required] --organization-name TEXT - Name of the organization [required] --project-name TEXT - Name of the project [required] --description TEXT - Description of the sub-crate [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --author TEXT - Author name (default: \"Unknown\") --version TEXT - Version number (default: \"1.0\") --license TEXT - License URL (default: \"https://creativecommons.org/licenses/by/4.0/\") Example: fairscape-cli rocrate register subrocrate \\ --name \"Sub-Crate Example\" \\ --organization-name \"UVA\" \\ --project-name \"B2AI\" \\ --description \"A sub-crate within the main RO-Crate\" \\ --keywords \"sub-crate\" \\ \"./test_rocrate\" \"./test_rocrate/sub_crate\" add \u00b6 Add a file to the RO-Crate and register its metadata. This command copies local files into the RO-Crate directory structure and registers their metadata. add dataset \u00b6 Add a dataset file and its metadata to an RO-Crate. fairscape-cli rocrate add dataset [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the dataset --name TEXT - Name of the dataset [required] --author TEXT - Author of the dataset [required] --version TEXT - Version of the dataset (default: \"1.0\") --description TEXT - Description of the dataset [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --data-format TEXT - Format of the dataset (e.g., csv, json) [required] --source-filepath TEXT - Path to the source dataset file on your local filesystem [required] --destination-filepath TEXT - Path where the dataset file will be copied in the RO-Crate [required] --url TEXT - URL reference for the dataset --date-published TEXT - Publication date of the dataset (ISO format) --schema TEXT - Schema identifier for the dataset --used-by TEXT - Identifiers of computations that use this dataset (can be specified multiple times) --derived-from TEXT - Identifiers of datasets this one is derived from (can be specified multiple times) --generated-by TEXT - Identifiers of computations that generated this dataset (can be specified multiple times) --summary-statistics-source TEXT - Path to source summary statistics file on your local filesystem --summary-statistics-destination TEXT - Path where summary statistics file will be copied in the RO-Crate --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate add dataset \\ --name \"AP-MS embeddings\" \\ --author \"Krogan lab\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"APMS embeddings for each protein\" \\ --keywords \"proteomics\" \\ --data-format \"CSV\" \\ --source-filepath \"./data/embeddings.csv\" \\ --destination-filepath \"./test_rocrate/embeddings.csv\" \\ \"./test_rocrate\" add software \u00b6 Add a software file and its metadata to an RO-Crate. fairscape-cli rocrate add software [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the software --name TEXT - Name of the software [required] --author TEXT - Author of the software [required] --version TEXT - Version of the software [required] --description TEXT - Description of the software [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --file-format TEXT - Format of the software (e.g., py, js) [required] --url TEXT - URL reference for the software --source-filepath TEXT - Path to the source software file on your local filesystem [required] --destination-filepath TEXT - Path where the software file will be copied in the RO-Crate [required] --date-modified TEXT - Last modification date of the software (ISO format) --used-by-computation TEXT - Identifiers of computations that use this software (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate add software \\ --name \"calibrate pairwise distance\" \\ --author \"Qin, Y.\" \\ --version \"1.0\" \\ --description \"script written in python to calibrate pairwise distance.\" \\ --keywords \"b2ai\" \\ --file-format \"py\" \\ --source-filepath \"./scripts/calibrate_pairwise_distance.py\" \\ --destination-filepath \"./test_rocrate/calibrate_pairwise_distance.py\" \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\"","title":"RO-Crate"},{"location":"commands/rocrate/#ro-crate-commands","text":"This document provides detailed information about the RO-Crate commands available in fairscape-cli.","title":"RO-Crate Commands"},{"location":"commands/rocrate/#overview","text":"The rocrate command group provides operations for creating and manipulating Research Object Crates (RO-Crates). RO-Crates are a lightweight approach to packaging research data with their metadata, making them more FAIR (Findable, Accessible, Interoperable, and Reusable). fairscape-cli rocrate [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/rocrate/#available-commands","text":"create - Create a new RO-Crate in a specified directory init - Initialize an RO-Crate in the current working directory register - Add metadata to an existing RO-Crate dataset - Register dataset metadata software - Register software metadata computation - Register computation metadata sample - Register sample metadata instrument - Register instrument metadata experiment - Register experiment metadata subrocrate - Register a new RO-Crate within an existing RO-Crate add - Add a file to the RO-Crate and register its metadata dataset - Add a dataset file and its metadata software - Add a software file and its metadata","title":"Available Commands"},{"location":"commands/rocrate/#command-details","text":"","title":"Command Details"},{"location":"commands/rocrate/#create","text":"Create a new RO-Crate in a specified directory. fairscape-cli rocrate create [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the RO-Crate --name TEXT - Name of the RO-Crate [required] --organization-name TEXT - Name of the organization [required] --project-name TEXT - Name of the project [required] --description TEXT - Description of the RO-Crate [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --license TEXT - License URL (default: \"https://creativecommons.org/licenses/by/4.0/\") --date-published TEXT - Publication date (ISO format) --author TEXT - Author name (default: \"Unknown\") --version TEXT - Version number (default: \"1.0\") --associated-publication TEXT - Associated publication --conditions-of-access TEXT - Conditions of access --copyright-notice TEXT - Copyright notice --custom-properties TEXT - JSON string with additional properties to include Example: fairscape-cli rocrate create \\ --name \"test rocrate\" \\ --description \"Example RO Crate for Tests\" \\ --organization-name \"UVA\" \\ --project-name \"B2AI\" \\ --keywords \"b2ai\" \\ --keywords \"cm4ai\" \\ \"./test_rocrate\"","title":"create"},{"location":"commands/rocrate/#init","text":"Initialize an RO-Crate in the current working directory. fairscape-cli rocrate init [ OPTIONS ] Options: The same options as for the create command are available. The difference is that init creates the RO-Crate in the current working directory. Example: fairscape-cli rocrate init \\ --name \"test rocrate\" \\ --description \"Example RO Crate for Tests\" \\ --organization-name \"UVA\" \\ --project-name \"B2AI\" \\ --keywords \"b2ai\" \\ --keywords \"cm4ai\"","title":"init"},{"location":"commands/rocrate/#register","text":"Add metadata to an existing RO-Crate. This command has several subcommands depending on the type of metadata to register.","title":"register"},{"location":"commands/rocrate/#register-dataset","text":"Register dataset metadata with an existing RO-Crate. fairscape-cli rocrate register dataset [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the dataset --name TEXT - Name of the dataset [required] --author TEXT - Author of the dataset [required] --version TEXT - Version of the dataset [required] --description TEXT - Description of the dataset [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --data-format TEXT - Format of the dataset (e.g., csv, json) [required] --filepath TEXT - Path to the dataset file (relative to crate root) --content-url TEXT - URL to the dataset file (if hosted externally) --embargoed - Flag indicating the dataset is embargoed (default: false) --url TEXT - URL reference for the dataset --date-published TEXT - Publication date of the dataset (ISO format) [required] --schema TEXT - Schema identifier for the dataset --used-by TEXT - Identifiers of computations that use this dataset (can be specified multiple times) --derived-from TEXT - Identifiers of datasets this one is derived from (can be specified multiple times) --generated-by TEXT - Identifiers of computations that generated this dataset (can be specified multiple times) --summary-statistics-filepath TEXT - Path to summary statistics file --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties to include File Location Options: You must specify exactly one of the following options to indicate where the dataset is located: --filepath - For datasets stored within the RO-Crate --content-url - For datasets hosted externally at a URL --embargoed - For datasets that are embargoed/restricted If multiple options are provided, they are prioritized in this order: filepath > content-url > embargoed . Example: # Register a dataset file within the crate fairscape-cli rocrate register dataset \\ --name \"AP-MS embeddings\" \\ --author \"Krogan lab\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"APMS embeddings for each protein\" \\ --keywords \"proteomics\" \\ --data-format \"CSV\" \\ --filepath \"./test_rocrate/embeddings.csv\" \\ \"./test_rocrate\" # Register an external dataset fairscape-cli rocrate register dataset \\ --name \"External Dataset\" \\ --author \"External Provider\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"Dataset hosted externally\" \\ --keywords \"external\" \\ --data-format \"CSV\" \\ --content-url \"https://example.com/dataset.csv\" \\ \"./test_rocrate\" # Register an embargoed dataset fairscape-cli rocrate register dataset \\ --name \"Embargoed Dataset\" \\ --author \"Research Team\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"Dataset under embargo\" \\ --keywords \"embargoed\" \\ --data-format \"CSV\" \\ --embargoed \\ \"./test_rocrate\"","title":"register dataset"},{"location":"commands/rocrate/#register-software","text":"Register software metadata with an existing RO-Crate. fairscape-cli rocrate register software [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the software --name TEXT - Name of the software [required] --author TEXT - Author of the software [required] --version TEXT - Version of the software [required] --description TEXT - Description of the software [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --file-format TEXT - Format of the software (e.g., py, js) [required] --url TEXT - URL reference for the software --date-modified TEXT - Last modification date of the software (ISO format) --filepath TEXT - Path to the software file (relative to crate root) --content-url TEXT - URL to the software file (if hosted externally) --embargoed - Flag indicating the software is embargoed (default: false) --used-by-computation TEXT - Identifiers of computations that use this software (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties File Location Options: You must specify exactly one of the following options to indicate where the software is located: --filepath - For software stored within the RO-Crate --content-url - For software hosted externally at a URL --embargoed - For software that is embargoed/restricted If multiple options are provided, they are prioritized in this order: filepath > content-url > embargoed . Example: # Register software file within the crate fairscape-cli rocrate register software \\ --name \"calibrate pairwise distance\" \\ --author \"Qin, Y.\" \\ --version \"1.0\" \\ --description \"script written in python to calibrate pairwise distance.\" \\ --keywords \"b2ai\" \\ --file-format \"py\" \\ --filepath \"./test_rocrate/calibrate_pairwise_distance.py\" \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\" # Register external software fairscape-cli rocrate register software \\ --name \"External Analysis Tool\" \\ --author \"External Developer\" \\ --version \"2.1\" \\ --description \"Analysis tool hosted on GitHub\" \\ --keywords \"analysis\" \\ --file-format \"py\" \\ --content-url \"https://github.com/user/repo/blob/main/analysis.py\" \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\" # Register embargoed software fairscape-cli rocrate register software \\ --name \"Proprietary Algorithm\" \\ --author \"Research Team\" \\ --version \"1.0\" \\ --description \"Proprietary analysis algorithm\" \\ --keywords \"proprietary\" \\ --file-format \"py\" \\ --embargoed \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\"","title":"register software"},{"location":"commands/rocrate/#register-computation","text":"Register computation metadata with an existing RO-Crate. fairscape-cli rocrate register computation [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the computation --name TEXT - Name of the computation [required] --run-by TEXT - Person or entity that ran the computation [required] --command TEXT - Command used to run the computation (string or JSON list) --date-created TEXT - Date the computation was run (ISO format) [required] --description TEXT - Description of the computation [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --used-software TEXT - Software identifiers used by this computation (can be specified multiple times) --used-dataset TEXT - Dataset identifiers used by this computation (can be specified multiple times) --generated TEXT - Dataset/Software identifiers generated by this computation (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register computation \\ --name \"calibrate pairwise distance\" \\ --run-by \"Qin, Y.\" \\ --date-created \"2023-05-23\" \\ --description \"Average the predicted proximities\" \\ --keywords \"b2ai\" \\ --keywords \"cm4ai\" \\ \"./test_rocrate\"","title":"register computation"},{"location":"commands/rocrate/#register-sample","text":"Register sample metadata with an existing RO-Crate. fairscape-cli rocrate register sample [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the sample --name TEXT - Name of the sample [required] --author TEXT - Author or creator of the sample [required] --description TEXT - Description of the sample [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --filepath TEXT - Path to the sample documentation file --cell-line-reference TEXT - Reference to the cell line used --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register sample \\ --name \"HeLa Cell Sample\" \\ --author \"Lab Technician\" \\ --description \"HeLa cells prepared for proteomics analysis\" \\ --keywords \"cell-culture\" \\ --keywords \"proteomics\" \\ --cell-line-reference \"ATCC CCL-2\" \\ \"./test_rocrate\"","title":"register sample"},{"location":"commands/rocrate/#register-instrument","text":"Register instrument metadata with an existing RO-Crate. fairscape-cli rocrate register instrument [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the instrument --name TEXT - Name of the instrument [required] --manufacturer TEXT - Manufacturer of the instrument [required] --model TEXT - Model number/name of the instrument [required] --description TEXT - Description of the instrument [required] --filepath TEXT - Path to instrument documentation file --used-by-experiment TEXT - Identifiers of experiments using this instrument (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register instrument \\ --name \"Mass Spectrometer MS-1000\" \\ --manufacturer \"Thermo Fisher Scientific\" \\ --model \"Orbitrap Fusion Lumos\" \\ --description \"High-resolution mass spectrometer for proteomics\" \\ --filepath \"./instruments/ms1000_manual.pdf\" \\ \"./test_rocrate\"","title":"register instrument"},{"location":"commands/rocrate/#register-experiment","text":"Register experiment metadata with an existing RO-Crate. fairscape-cli rocrate register experiment [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the experiment --name TEXT - Name of the experiment [required] --experiment-type TEXT - Type of experiment conducted [required] --run-by TEXT - Person or entity that ran the experiment [required] --description TEXT - Description of the experiment [required] --date-performed TEXT - Date the experiment was performed (ISO format) [required] --used-instrument TEXT - Instrument identifiers used in this experiment (can be specified multiple times) --used-sample TEXT - Sample identifiers used in this experiment (can be specified multiple times) --used-treatment TEXT - Treatment identifiers used in this experiment (can be specified multiple times) --used-stain TEXT - Stain identifiers used in this experiment (can be specified multiple times) --generated TEXT - Identifiers of entities generated by this experiment (can be specified multiple times) --protocol TEXT - Protocol identifier or description --associated-publication TEXT - Associated publication identifier --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate register experiment \\ --name \"Proteomics Analysis Experiment\" \\ --experiment-type \"Mass Spectrometry\" \\ --run-by \"Research Team\" \\ --description \"Comprehensive proteomics analysis of cell samples\" \\ --date-performed \"2023-05-15\" \\ --used-instrument \"ark:/12345/instrument-1\" \\ --used-sample \"ark:/12345/sample-1\" \\ --protocol \"Standard MS Protocol v2.1\" \\ \"./test_rocrate\"","title":"register experiment"},{"location":"commands/rocrate/#register-subrocrate","text":"Register a new RO-Crate within an existing RO-Crate directory. fairscape-cli rocrate register subrocrate [ OPTIONS ] ROCRATE_PATH SUBROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the sub-crate --name TEXT - Name of the sub-crate [required] --organization-name TEXT - Name of the organization [required] --project-name TEXT - Name of the project [required] --description TEXT - Description of the sub-crate [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --author TEXT - Author name (default: \"Unknown\") --version TEXT - Version number (default: \"1.0\") --license TEXT - License URL (default: \"https://creativecommons.org/licenses/by/4.0/\") Example: fairscape-cli rocrate register subrocrate \\ --name \"Sub-Crate Example\" \\ --organization-name \"UVA\" \\ --project-name \"B2AI\" \\ --description \"A sub-crate within the main RO-Crate\" \\ --keywords \"sub-crate\" \\ \"./test_rocrate\" \"./test_rocrate/sub_crate\"","title":"register subrocrate"},{"location":"commands/rocrate/#add","text":"Add a file to the RO-Crate and register its metadata. This command copies local files into the RO-Crate directory structure and registers their metadata.","title":"add"},{"location":"commands/rocrate/#add-dataset","text":"Add a dataset file and its metadata to an RO-Crate. fairscape-cli rocrate add dataset [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the dataset --name TEXT - Name of the dataset [required] --author TEXT - Author of the dataset [required] --version TEXT - Version of the dataset (default: \"1.0\") --description TEXT - Description of the dataset [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --data-format TEXT - Format of the dataset (e.g., csv, json) [required] --source-filepath TEXT - Path to the source dataset file on your local filesystem [required] --destination-filepath TEXT - Path where the dataset file will be copied in the RO-Crate [required] --url TEXT - URL reference for the dataset --date-published TEXT - Publication date of the dataset (ISO format) --schema TEXT - Schema identifier for the dataset --used-by TEXT - Identifiers of computations that use this dataset (can be specified multiple times) --derived-from TEXT - Identifiers of datasets this one is derived from (can be specified multiple times) --generated-by TEXT - Identifiers of computations that generated this dataset (can be specified multiple times) --summary-statistics-source TEXT - Path to source summary statistics file on your local filesystem --summary-statistics-destination TEXT - Path where summary statistics file will be copied in the RO-Crate --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate add dataset \\ --name \"AP-MS embeddings\" \\ --author \"Krogan lab\" \\ --version \"1.0\" \\ --date-published \"2023-04-23\" \\ --description \"APMS embeddings for each protein\" \\ --keywords \"proteomics\" \\ --data-format \"CSV\" \\ --source-filepath \"./data/embeddings.csv\" \\ --destination-filepath \"./test_rocrate/embeddings.csv\" \\ \"./test_rocrate\"","title":"add dataset"},{"location":"commands/rocrate/#add-software","text":"Add a software file and its metadata to an RO-Crate. fairscape-cli rocrate add software [ OPTIONS ] ROCRATE_PATH Options: --guid TEXT - Optional custom identifier for the software --name TEXT - Name of the software [required] --author TEXT - Author of the software [required] --version TEXT - Version of the software [required] --description TEXT - Description of the software [required] --keywords TEXT - Keywords (can be specified multiple times) [required] --file-format TEXT - Format of the software (e.g., py, js) [required] --url TEXT - URL reference for the software --source-filepath TEXT - Path to the source software file on your local filesystem [required] --destination-filepath TEXT - Path where the software file will be copied in the RO-Crate [required] --date-modified TEXT - Last modification date of the software (ISO format) --used-by-computation TEXT - Identifiers of computations that use this software (can be specified multiple times) --associated-publication TEXT - Associated publication identifier --additional-documentation TEXT - Additional documentation --custom-properties TEXT - JSON string with additional properties Example: fairscape-cli rocrate add software \\ --name \"calibrate pairwise distance\" \\ --author \"Qin, Y.\" \\ --version \"1.0\" \\ --description \"script written in python to calibrate pairwise distance.\" \\ --keywords \"b2ai\" \\ --file-format \"py\" \\ --source-filepath \"./scripts/calibrate_pairwise_distance.py\" \\ --destination-filepath \"./test_rocrate/calibrate_pairwise_distance.py\" \\ --date-modified \"2023-04-23\" \\ \"./test_rocrate\"","title":"add software"},{"location":"commands/schema/","text":"Schema Commands \u00b6 This document provides detailed information about the schema commands available in fairscape-cli. Overview \u00b6 The schema command group provides operations for creating, modifying, working with data schemas, and validating data against schemas. Schemas describe the structure and constraints of datasets, enabling validation and improved interoperability. fairscape-cli schema [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 create-tabular - Create a new tabular schema definition add-property - Add a property to an existing schema string - Add a string property number - Add a number property integer - Add an integer property boolean - Add a boolean property array - Add an array property infer - Infer a schema from a data file add-to-crate - Add a schema to an RO-Crate validate - Validate a dataset against a schema definition Command Details \u00b6 create-tabular \u00b6 Create a new tabular schema definition. fairscape-cli schema create-tabular [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the schema [required] --description TEXT - Description of the schema [required] --guid TEXT - Optional custom identifier for the schema --separator TEXT - Field separator character (e.g., , for CSV) [required] --header BOOLEAN - Whether the data file has a header row (default: False) Example: fairscape-cli schema create-tabular \\ --name 'APMS Embedding Schema' \\ --description 'Tabular format for APMS music embeddings' \\ --separator ',' \\ --header False \\ ./schema_apms_music_embedding.json add-property \u00b6 This command group allows you to add different types of properties to an existing schema. add-property string \u00b6 Add a string property to a schema. fairscape-cli schema add-property string [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --value-url TEXT - URL to a vocabulary term --pattern TEXT - Regular expression pattern for validation Example: fairscape-cli schema add-property string \\ --name 'Gene Symbol' \\ --index 1 \\ --description 'Gene Symbol for the APMS bait protein' \\ --pattern '^[A-Za-z0-9\\-]*$' \\ --value-url 'http://edamontology.org/data_1026' \\ ./schema_apms_music_embedding.json add-property number \u00b6 Add a number property to a schema. fairscape-cli schema add-property number [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --maximum FLOAT - Maximum allowed value --minimum FLOAT - Minimum allowed value --value-url TEXT - URL to a vocabulary term Example: fairscape-cli schema add-property number \\ --name 'Measurement' \\ --index 2 \\ --description 'Sensor reading in units of X' \\ --minimum 0 .0 \\ --maximum 100 .0 \\ ./schema_apms_music_embedding.json add-property integer \u00b6 Add an integer property to a schema. fairscape-cli schema add-property integer [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --maximum INTEGER - Maximum allowed value --minimum INTEGER - Minimum allowed value --value-url TEXT - URL to a vocabulary term Example: fairscape-cli schema add-property integer \\ --name 'Count' \\ --index 3 \\ --description 'Count of observations' \\ --minimum 0 \\ ./schema_apms_music_embedding.json add-property boolean \u00b6 Add a boolean property to a schema. fairscape-cli schema add-property boolean [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --value-url TEXT - URL to a vocabulary term Example: fairscape-cli schema add-property boolean \\ --name 'IsValid' \\ --index 4 \\ --description 'Whether the observation is valid' \\ ./schema_apms_music_embedding.json add-property array \u00b6 Add an array property to a schema. fairscape-cli schema add-property array [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index TEXT - Column index or range in the data (e.g., \"5\" or \"2::\") [required] --description TEXT - Description of the property [required] --value-url TEXT - URL to a vocabulary term --items-datatype TEXT - Datatype of items in the array ( string , number , integer , boolean ) [required] --min-items INTEGER - Minimum number of items in the array --max-items INTEGER - Maximum number of items in the array --unique-items BOOLEAN - Whether items must be unique Example: fairscape-cli schema add-property array \\ --name 'MUSIC APMS Embedding' \\ --index '2::' \\ --description 'Embedding Vector values' \\ --items-datatype 'number' \\ --unique-items False \\ --min-items 1024 \\ --max-items 1024 \\ ./schema_apms_music_embedding.json infer \u00b6 Infer a schema from a data file. fairscape-cli schema infer [ OPTIONS ] INPUT_FILE SCHEMA_FILE Options: --name TEXT - Name for the schema [required] --description TEXT - Description for the schema [required] --guid TEXT - Optional custom identifier for the schema --rocrate-path PATH - Optional path to an RO-Crate to append the schema to Example: fairscape-cli schema infer \\ --name 'Output Dataset Schema' \\ --description 'Inferred schema for output data' \\ --rocrate-path ./my_rocrate \\ ./my_rocrate/output.csv \\ ./my_rocrate/output_schema.json add-to-crate \u00b6 Add a schema to an RO-Crate. fairscape-cli schema add-to-crate ROCRATE_PATH SCHEMA_FILE Arguments: ROCRATE_PATH - Path to the RO-Crate to add the schema to SCHEMA_FILE - Path to the schema file Example: fairscape-cli schema add-to-crate \\ ./my_rocrate \\ ./schema_apms_music_embedding.json validate \u00b6 Validate a dataset against a schema definition. fairscape-cli schema validate [ OPTIONS ] Options: --schema TEXT - Path to the schema file or ARK identifier [required] --data TEXT - Path to the data file to validate [required] Example: fairscape-cli schema validate \\ --schema ./music_apms_embedding_schema.json \\ --data ./APMS_embedding_MUSIC.csv When validation succeeds, you'll see: Validation Success If validation fails, you'll see a table of errors: +-----+-----------------+----------------+-------------------------------------------------------+ | row | error_type | failed_keyword | message | +-----+-----------------+----------------+-------------------------------------------------------+ | 3 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 3 | | 4 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 4 | | 0 | ValidationError | pattern | 'APMS_A' does not match '^APMS_[0-9]*$' | +-----+-----------------+----------------+-------------------------------------------------------+ Error Types \u00b6 Errors are categorized into two main types: ParsingError : Occurs when the data cannot be parsed according to the schema structure. This often happens when: The number of columns doesn't match the schema A value cannot be converted to the expected datatype ValidationError : Occurs when the data can be parsed but fails validation constraints like: String values not matching the specified pattern Numeric values outside the min/max range Array length not within specified bounds Working with Different File Types \u00b6 The validation command automatically detects the file type based on its extension: CSV/TSV files : Tabular validation with field separators Parquet files : Tabular validation with columnar storage HDF5 files : Hierarchical validation with nested structures","title":"Schema"},{"location":"commands/schema/#schema-commands","text":"This document provides detailed information about the schema commands available in fairscape-cli.","title":"Schema Commands"},{"location":"commands/schema/#overview","text":"The schema command group provides operations for creating, modifying, working with data schemas, and validating data against schemas. Schemas describe the structure and constraints of datasets, enabling validation and improved interoperability. fairscape-cli schema [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/schema/#available-commands","text":"create-tabular - Create a new tabular schema definition add-property - Add a property to an existing schema string - Add a string property number - Add a number property integer - Add an integer property boolean - Add a boolean property array - Add an array property infer - Infer a schema from a data file add-to-crate - Add a schema to an RO-Crate validate - Validate a dataset against a schema definition","title":"Available Commands"},{"location":"commands/schema/#command-details","text":"","title":"Command Details"},{"location":"commands/schema/#create-tabular","text":"Create a new tabular schema definition. fairscape-cli schema create-tabular [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the schema [required] --description TEXT - Description of the schema [required] --guid TEXT - Optional custom identifier for the schema --separator TEXT - Field separator character (e.g., , for CSV) [required] --header BOOLEAN - Whether the data file has a header row (default: False) Example: fairscape-cli schema create-tabular \\ --name 'APMS Embedding Schema' \\ --description 'Tabular format for APMS music embeddings' \\ --separator ',' \\ --header False \\ ./schema_apms_music_embedding.json","title":"create-tabular"},{"location":"commands/schema/#add-property","text":"This command group allows you to add different types of properties to an existing schema.","title":"add-property"},{"location":"commands/schema/#add-property-string","text":"Add a string property to a schema. fairscape-cli schema add-property string [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --value-url TEXT - URL to a vocabulary term --pattern TEXT - Regular expression pattern for validation Example: fairscape-cli schema add-property string \\ --name 'Gene Symbol' \\ --index 1 \\ --description 'Gene Symbol for the APMS bait protein' \\ --pattern '^[A-Za-z0-9\\-]*$' \\ --value-url 'http://edamontology.org/data_1026' \\ ./schema_apms_music_embedding.json","title":"add-property string"},{"location":"commands/schema/#add-property-number","text":"Add a number property to a schema. fairscape-cli schema add-property number [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --maximum FLOAT - Maximum allowed value --minimum FLOAT - Minimum allowed value --value-url TEXT - URL to a vocabulary term Example: fairscape-cli schema add-property number \\ --name 'Measurement' \\ --index 2 \\ --description 'Sensor reading in units of X' \\ --minimum 0 .0 \\ --maximum 100 .0 \\ ./schema_apms_music_embedding.json","title":"add-property number"},{"location":"commands/schema/#add-property-integer","text":"Add an integer property to a schema. fairscape-cli schema add-property integer [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --maximum INTEGER - Maximum allowed value --minimum INTEGER - Minimum allowed value --value-url TEXT - URL to a vocabulary term Example: fairscape-cli schema add-property integer \\ --name 'Count' \\ --index 3 \\ --description 'Count of observations' \\ --minimum 0 \\ ./schema_apms_music_embedding.json","title":"add-property integer"},{"location":"commands/schema/#add-property-boolean","text":"Add a boolean property to a schema. fairscape-cli schema add-property boolean [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index INTEGER - Column index in the data (0-based) [required] --description TEXT - Description of the property [required] --value-url TEXT - URL to a vocabulary term Example: fairscape-cli schema add-property boolean \\ --name 'IsValid' \\ --index 4 \\ --description 'Whether the observation is valid' \\ ./schema_apms_music_embedding.json","title":"add-property boolean"},{"location":"commands/schema/#add-property-array","text":"Add an array property to a schema. fairscape-cli schema add-property array [ OPTIONS ] SCHEMA_FILE Options: --name TEXT - Name of the property [required] --index TEXT - Column index or range in the data (e.g., \"5\" or \"2::\") [required] --description TEXT - Description of the property [required] --value-url TEXT - URL to a vocabulary term --items-datatype TEXT - Datatype of items in the array ( string , number , integer , boolean ) [required] --min-items INTEGER - Minimum number of items in the array --max-items INTEGER - Maximum number of items in the array --unique-items BOOLEAN - Whether items must be unique Example: fairscape-cli schema add-property array \\ --name 'MUSIC APMS Embedding' \\ --index '2::' \\ --description 'Embedding Vector values' \\ --items-datatype 'number' \\ --unique-items False \\ --min-items 1024 \\ --max-items 1024 \\ ./schema_apms_music_embedding.json","title":"add-property array"},{"location":"commands/schema/#infer","text":"Infer a schema from a data file. fairscape-cli schema infer [ OPTIONS ] INPUT_FILE SCHEMA_FILE Options: --name TEXT - Name for the schema [required] --description TEXT - Description for the schema [required] --guid TEXT - Optional custom identifier for the schema --rocrate-path PATH - Optional path to an RO-Crate to append the schema to Example: fairscape-cli schema infer \\ --name 'Output Dataset Schema' \\ --description 'Inferred schema for output data' \\ --rocrate-path ./my_rocrate \\ ./my_rocrate/output.csv \\ ./my_rocrate/output_schema.json","title":"infer"},{"location":"commands/schema/#add-to-crate","text":"Add a schema to an RO-Crate. fairscape-cli schema add-to-crate ROCRATE_PATH SCHEMA_FILE Arguments: ROCRATE_PATH - Path to the RO-Crate to add the schema to SCHEMA_FILE - Path to the schema file Example: fairscape-cli schema add-to-crate \\ ./my_rocrate \\ ./schema_apms_music_embedding.json","title":"add-to-crate"},{"location":"commands/schema/#validate","text":"Validate a dataset against a schema definition. fairscape-cli schema validate [ OPTIONS ] Options: --schema TEXT - Path to the schema file or ARK identifier [required] --data TEXT - Path to the data file to validate [required] Example: fairscape-cli schema validate \\ --schema ./music_apms_embedding_schema.json \\ --data ./APMS_embedding_MUSIC.csv When validation succeeds, you'll see: Validation Success If validation fails, you'll see a table of errors: +-----+-----------------+----------------+-------------------------------------------------------+ | row | error_type | failed_keyword | message | +-----+-----------------+----------------+-------------------------------------------------------+ | 3 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 3 | | 4 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 4 | | 0 | ValidationError | pattern | 'APMS_A' does not match '^APMS_[0-9]*$' | +-----+-----------------+----------------+-------------------------------------------------------+","title":"validate"},{"location":"commands/schema/#error-types","text":"Errors are categorized into two main types: ParsingError : Occurs when the data cannot be parsed according to the schema structure. This often happens when: The number of columns doesn't match the schema A value cannot be converted to the expected datatype ValidationError : Occurs when the data can be parsed but fails validation constraints like: String values not matching the specified pattern Numeric values outside the min/max range Array length not within specified bounds","title":"Error Types"},{"location":"commands/schema/#working-with-different-file-types","text":"The validation command automatically detects the file type based on its extension: CSV/TSV files : Tabular validation with field separators Parquet files : Tabular validation with columnar storage HDF5 files : Hierarchical validation with nested structures","title":"Working with Different File Types"},{"location":"commands/validate/","text":"Validation Commands \u00b6 This document provides detailed information about the validation commands available in fairscape-cli. Overview \u00b6 The validate command group provides operations for validating data against schemas. This ensures that datasets conform to their expected structure and constraints. fairscape-cli validate [ COMMAND ] [ OPTIONS ] Available Commands \u00b6 schema - Validate a dataset against a schema definition Command Details \u00b6 schema \u00b6 Validate a dataset against a schema definition. fairscape-cli validate schema [ OPTIONS ] Options: --schema TEXT - Path to the schema file or ARK identifier [required] --data TEXT - Path to the data file to validate [required] Example: fairscape-cli validate schema \\ --schema ./music_apms_embedding_schema.json \\ --data ./APMS_embedding_MUSIC.csv When validation succeeds, you'll see: Validation Success If validation fails, you'll see a table of errors: +-----+-----------------+----------------+-------------------------------------------------------+ | row | error_type | failed_keyword | message | +-----+-----------------+----------------+-------------------------------------------------------+ | 3 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 3 | | 4 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 4 | | 0 | ValidationError | pattern | 'APMS_A' does not match '^APMS_[0-9]*$' | +-----+-----------------+----------------+-------------------------------------------------------+ Error Types \u00b6 Errors are categorized into two main types: ParsingError : Occurs when the data cannot be parsed according to the schema structure. This often happens when: The number of columns doesn't match the schema A value cannot be converted to the expected datatype ValidationError : Occurs when the data can be parsed but fails validation constraints like: String values not matching the specified pattern Numeric values outside the min/max range Array length not within specified bounds Working with Different File Types \u00b6 The validation command automatically detects the file type based on its extension: CSV/TSV files : Tabular validation with field separators Parquet files : Tabular validation with columnar storage HDF5 files : Hierarchical validation with nested structures","title":"Validation Commands"},{"location":"commands/validate/#validation-commands","text":"This document provides detailed information about the validation commands available in fairscape-cli.","title":"Validation Commands"},{"location":"commands/validate/#overview","text":"The validate command group provides operations for validating data against schemas. This ensures that datasets conform to their expected structure and constraints. fairscape-cli validate [ COMMAND ] [ OPTIONS ]","title":"Overview"},{"location":"commands/validate/#available-commands","text":"schema - Validate a dataset against a schema definition","title":"Available Commands"},{"location":"commands/validate/#command-details","text":"","title":"Command Details"},{"location":"commands/validate/#schema","text":"Validate a dataset against a schema definition. fairscape-cli validate schema [ OPTIONS ] Options: --schema TEXT - Path to the schema file or ARK identifier [required] --data TEXT - Path to the data file to validate [required] Example: fairscape-cli validate schema \\ --schema ./music_apms_embedding_schema.json \\ --data ./APMS_embedding_MUSIC.csv When validation succeeds, you'll see: Validation Success If validation fails, you'll see a table of errors: +-----+-----------------+----------------+-------------------------------------------------------+ | row | error_type | failed_keyword | message | +-----+-----------------+----------------+-------------------------------------------------------+ | 3 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 3 | | 4 | ParsingError | None | ValueError: Failed to Parse Attribute embed for Row 4 | | 0 | ValidationError | pattern | 'APMS_A' does not match '^APMS_[0-9]*$' | +-----+-----------------+----------------+-------------------------------------------------------+","title":"schema"},{"location":"commands/validate/#error-types","text":"Errors are categorized into two main types: ParsingError : Occurs when the data cannot be parsed according to the schema structure. This often happens when: The number of columns doesn't match the schema A value cannot be converted to the expected datatype ValidationError : Occurs when the data can be parsed but fails validation constraints like: String values not matching the specified pattern Numeric values outside the min/max range Array length not within specified bounds","title":"Error Types"},{"location":"commands/validate/#working-with-different-file-types","text":"The validation command automatically detects the file type based on its extension: CSV/TSV files : Tabular validation with field separators Parquet files : Tabular validation with columnar storage HDF5 files : Hierarchical validation with nested structures","title":"Working with Different File Types"},{"location":"workflows/complete-demo/","text":"Fairscape-CLI Complete Workflow Demo \u00b6 This document demonstrates a complete workflow for using fairscape-cli to create, manage, and publish research data packages with proper metadata. The workflow follows these key steps: Build a crate with local files and computation Create schemas and validate data Build a crate from external repository data Generate evidence graphs Build a unified release crate with rich metadata Prerequisites \u00b6 Before starting this workflow, make sure you have: fairscape-cli installed Step 1: Build a Crate with Local Files and Computation \u00b6 We'll start by creating a small data processing example using local files. This demonstrates the full research object lifecycle from input to output. 1.1 Create Input File and Processing Script \u00b6 First, let's create a directory structure and generate sample files for our computation: # Create the base directory mkdir -p ./simple-computation # Create sample input.csv with Python python -c \"import pandas as pd; pd.DataFrame({'value1': [10, 20, 30, 40, 50], 'value2': [5, 15, 25, 35, 45]}).to_csv('./simple-computation/input.csv', index=False)\" # Create sample software.py cat > ./simple-computation/software.py << 'EOF' import pandas as pd import sys def process_data(input_file, output_file): # Read input data data = pd.read_csv(input_file) # Process data (calculate sum and product) data['sum'] = data['value1'] + data['value2'] data['product'] = data['value1'] * data['value2'] # Save results data.to_csv(output_file, index=False) print(f\"Processing complete. Results saved to {output_file}\") if __name__ == \"__main__\": if len(sys.argv) >= 3: process_data(sys.argv[1], sys.argv[2]) else: print(\"Usage: python software.py input.csv output.csv\") EOF 1.2 Create and Register RO-Crate \u00b6 Now, let's create the RO-Crate and register our input dataset and software: # Create the RO-Crate fairscape-cli rocrate create \\ --name 'Simple Computation Example' \\ --organization-name 'Example Organization' \\ --project-name 'Data Processing Demo' \\ --date-published '2025-04-16' \\ --description 'A simple demonstration of data processing in an RO-Crate' \\ --keywords 'computation,demo,rocrate' \\ './simple-computation' # Register the input dataset fairscape-cli rocrate register dataset \\ './simple-computation' \\ --name 'Input Dataset' \\ --author 'Example Author' \\ --version '1.0' \\ --date-published '2025-04-16' \\ --description 'Input data for computation example' \\ --keywords 'data,input' \\ --data-format 'csv' \\ --filepath './simple-computation/input.csv' # Register the software fairscape-cli rocrate register software \\ './simple-computation' \\ --name 'Data Processing Software' \\ --author 'Example Developer' \\ --version '1.0' \\ --description 'Software that computes sum and product of two columns' \\ --keywords 'software,processing' \\ --file-format 'py' \\ --filepath './simple-computation/software.py' \\ --date-modified '2025-04-16' 1.3 Infer and Validate Input Data Against Schema \u00b6 Let's create a schema for our input data and validate against it: # Create the tabular schema fairscape-cli schema create-tabular \\ --name 'Input Dataset Schema' \\ --description 'Schema for the input data used in the computation example' \\ --separator ',' \\ './simple-computation/input_schema.json' # Add properties to the schema fairscape-cli schema add-property integer \\ --name 'value1' \\ --index 0 \\ --description 'Column value1' \\ './simple-computation/input_schema.json' fairscape-cli schema add-property integer \\ --name 'value2' \\ --index 1 \\ --description 'Column value2' \\ './simple-computation/input_schema.json' # Register the schema with the RO-Crate fairscape-cli schema add-to-crate \\ './simple-computation' \\ './simple-computation/input_schema.json' # Validate the input data against the schema fairscape-cli schema validate \\ --schema './simple-computation/input_schema.json' \\ --data './simple-computation/input.csv' 1.4 Run and Register the Computation \u00b6 Execute the software and register the computation activity: # Run the software to generate output python ./simple-computation/software.py \\ ./simple-computation/input.csv \\ ./simple-computation/output.csv # Register the computation fairscape-cli rocrate register computation \\ './simple-computation' \\ --name 'Data Processing Computation' \\ --run-by 'Example Researcher' \\ --date-created '2025-04-16' \\ --description 'Computation that generates sum and product of input values' \\ --keywords 'computation,processing' \\ --used-software 'ark:59852/software-data-processing-software-XXXX' \\ --used-dataset 'ark:59852/dataset-input-dataset-XXXX' \\ --command 'python software.py input.csv output.csv' Note: Replace the ARK identifiers with the actual values returned by your previous commands. 1.5 Register Output and Infer Schema \u00b6 Register the output dataset and infer its schema: # Register the output dataset with explicit --generated-by parameter fairscape-cli rocrate register dataset \\ './simple-computation' \\ --name 'Output Dataset' \\ --author 'Example Author' \\ --version '1.0' \\ --date-published '2025-04-16' \\ --description 'Output data from computation example' \\ --keywords 'data,output' \\ --data-format 'csv' \\ --filepath './simple-computation/output.csv' \\ --generated-by 'ark:59852/computation-data-processing-computation-XXXX' # Infer the schema and add it to the RO-Crate fairscape-cli schema infer \\ --name 'Output Dataset Schema' \\ --description 'Schema for the output data used in the computation example' \\ --rocrate-path './simple-computation' \\ './simple-computation/output.csv' \\ './simple-computation/output_schema.json' # Validate the output data against the inferred schema fairscape-cli schema validate \\ --schema './simple-computation/output_schema.json' \\ --data './simple-computation/output.csv' 1.6 Generate a Provenance Graph for the Main Output \u00b6 Create a visual representation of the data provenance: # Generate evidence graph for the output dataset fairscape-cli build evidence-graph \\ './simple-computation' \\ 'ark:59852/dataset-output-dataset-XXXX' This will create both JSON and HTML visualizations of the data provenance in the RO-Crate. Step 2: Build a Crate from External Repository Data \u00b6 Now let's demonstrate how to pull data from an external repository and create a new RO-Crate. 2.1 Pull Data from an External Repository \u00b6 # Pull data from a BioProject fairscape-cli import bioproject \\ --accession \"PRJDB2884\" \\ --api-key \"\" \\ --output-dir \"./sra-crate\" \\ --author \"Justin, Max\" This command fetches metadata from NCBI's BioProject database and creates a complete RO-Crate with that information. 2.2 Create Schemas for External Data \u00b6 Let's create a schema for FASTQ sequence data: # Create a tabular schema for FASTQ format fairscape-cli schema create-tabular \\ --name 'fastq_data' \\ --description 'FASTQ sequence data schema' \\ --separator '\\n' \\ --header 'false' \\ './sra-crate/fastq_schema.json' # Add the header property to the schema fairscape-cli schema add-property string \\ --name 'header' \\ --index '0' \\ --description 'The header line starting with @' \\ --pattern '^@.*' \\ './sra-crate/fastq_schema.json' # Add the sequence property to the schema fairscape-cli schema add-property string \\ --name 'sequence' \\ --index '1' \\ --description 'The nucleotide sequence' \\ --pattern '^[ATCGN]+$' \\ './sra-crate/fastq_schema.json' # Add the plus sign line property to the schema fairscape-cli schema add-property string \\ --name 'plus' \\ --index '2' \\ --description 'The plus sign line' \\ --pattern '^\\+.*' \\ './sra-crate/fastq_schema.json' # Add the quality scores property to the schema fairscape-cli schema add-property string \\ --name 'quality_scores' \\ --index '3' \\ --description 'The quality scores in Phred+33 encoding' \\ './sra-crate/fastq_schema.json' # Register the schema with the RO-Crate fairscape-cli schema add-to-crate \\ './sra-crate' \\ './sra-crate/fastq_schema.json' 2.3 Generate Evidence Graph for External Data \u00b6 Find a key dataset in the crate and generate its evidence graph: # First, get the ID of a main dataset in the crate DATASET_ID = $( grep -o \"ark:59852/dataset-[a-zA-Z0-9-]*\" ./sra-crate/ro-crate-metadata.json | head -1 ) # Generate evidence graph for the dataset fairscape-cli build evidence-graph \\ './sra-crate' \\ \" $DATASET_ID \" \\ --output-file './sra-crate/provenance-graph.json' Step 3: Build a Unified Release Crate \u00b6 Now, let's build a release crate that combines our local computation and the external data: # Create a release RO-Crate fairscape-cli build release ./ \\ --guid \"ark:59852/example-release-for-demo\" \\ --name \"SRA Genomic Data Example Release - 2025\" \\ --organization-name \"Example Research Institute\" \\ --project-name \"Genomic Data Analysis Project\" \\ --description \"This comprehensive dataset contains genomic data from multiple sources, including Japanese flounder (PRJDB2884) and human RNA-seq data (PRJEB86838) from the Sequence Read Archive (SRA). All data has been processed and prepared as AI-ready datasets in RO-Crate format, with appropriate metadata and provenance information to ensure FAIR data principles compliance.\" \\ --keywords \"Genomics\" \\ --keywords \"SRA\" \\ --keywords \"RNA-seq\" \\ --keywords \"Sequence Read Archive\" \\ --keywords \"Bioinformatics\" \\ --license \"https://creativecommons.org/licenses/by/4.0/\" \\ --version \"1.0\" \\ --publisher \"University of Virginia Dataverse\" \\ --principal-investigator \"Dr. Example PI\" \\ --copyright-notice \"Copyright (c) 2025 The Regents of the University of California except where otherwise noted.\" \\ --conditions-of-access \"Attribution is required to the copyright holders and the authors.\" \\ --contact-email \"example@example.org\" \\ --confidentiality-level \"HL7 Unrestricted\" \\ --funder \"Example Agency\" \\ --usage-info \"This dataset is intended for research purposes in genomics, bioinformatics, and related fields.\" \\ --content-size \"2.45 GB\" \\ --citation \"Example Research Institute (2025). SRA Genomic Data Example Release.\" \\ --associated-publication \"Smith et al. (2025). Novel approaches to genomic data analysis using SRA datasets.\" \\ --completeness \"These data contain complete processed datasets from the specified SRA projects.\" \\ --maintenance-plan \"This dataset will be periodically updated with corrections or additional annotations.\" \\ --intended-use \"This dataset is intended for genomic research and educational purposes.\" \\ --limitations \"While comprehensive quality control has been performed, researchers should be aware of inherent limitations.\" \\ --potential-sources-of-bias \"Original sample collection methods may introduce biases.\" \\ --prohibited-uses \"Commercial redistribution without attribution is prohibited.\" \\ --human-subject \"No\" # Generate a datasheet for the release fairscape-cli build datasheet ./ This creates a unified release that includes both our individual RO-Crates with a comprehensive datasheet. Step 4: Publishing RO-Crates \u00b6 Once you've created your RO-Crates and assembled them into a release, you can publish them to repositories for broader access and assign persistent identifiers. 4 Publish to Fairscape \u00b6 fairscape-cli publish fairscape \\ --rocrate \"./\" \\ --username \"your_username\" \\ --password \"your_password\" \\ --api-url \"https://fairscape.net/api\" Conclusion \u00b6 This workflow demonstrates the complete process of creating, managing, combining, and publishing research data packages using fairscape-cli. By following these steps, you can: Create well-structured RO-Crates with proper metadata Register data, software, and computations with appropriate relationships Define and validate data schemas Pull data from external repositories Generate provenance visualizations Build comprehensive release packages with rich metadata Publish your data to fairscape These capabilities enable FAIR (Findable, Accessible, Interoperable, Reusable) data sharing practices for scientific research, making your data discoverable, properly cited, and reusable by the broader community.","title":"Complete Demo"},{"location":"workflows/complete-demo/#fairscape-cli-complete-workflow-demo","text":"This document demonstrates a complete workflow for using fairscape-cli to create, manage, and publish research data packages with proper metadata. The workflow follows these key steps: Build a crate with local files and computation Create schemas and validate data Build a crate from external repository data Generate evidence graphs Build a unified release crate with rich metadata","title":"Fairscape-CLI Complete Workflow Demo"},{"location":"workflows/complete-demo/#prerequisites","text":"Before starting this workflow, make sure you have: fairscape-cli installed","title":"Prerequisites"},{"location":"workflows/complete-demo/#step-1-build-a-crate-with-local-files-and-computation","text":"We'll start by creating a small data processing example using local files. This demonstrates the full research object lifecycle from input to output.","title":"Step 1: Build a Crate with Local Files and Computation"},{"location":"workflows/complete-demo/#11-create-input-file-and-processing-script","text":"First, let's create a directory structure and generate sample files for our computation: # Create the base directory mkdir -p ./simple-computation # Create sample input.csv with Python python -c \"import pandas as pd; pd.DataFrame({'value1': [10, 20, 30, 40, 50], 'value2': [5, 15, 25, 35, 45]}).to_csv('./simple-computation/input.csv', index=False)\" # Create sample software.py cat > ./simple-computation/software.py << 'EOF' import pandas as pd import sys def process_data(input_file, output_file): # Read input data data = pd.read_csv(input_file) # Process data (calculate sum and product) data['sum'] = data['value1'] + data['value2'] data['product'] = data['value1'] * data['value2'] # Save results data.to_csv(output_file, index=False) print(f\"Processing complete. Results saved to {output_file}\") if __name__ == \"__main__\": if len(sys.argv) >= 3: process_data(sys.argv[1], sys.argv[2]) else: print(\"Usage: python software.py input.csv output.csv\") EOF","title":"1.1 Create Input File and Processing Script"},{"location":"workflows/complete-demo/#12-create-and-register-ro-crate","text":"Now, let's create the RO-Crate and register our input dataset and software: # Create the RO-Crate fairscape-cli rocrate create \\ --name 'Simple Computation Example' \\ --organization-name 'Example Organization' \\ --project-name 'Data Processing Demo' \\ --date-published '2025-04-16' \\ --description 'A simple demonstration of data processing in an RO-Crate' \\ --keywords 'computation,demo,rocrate' \\ './simple-computation' # Register the input dataset fairscape-cli rocrate register dataset \\ './simple-computation' \\ --name 'Input Dataset' \\ --author 'Example Author' \\ --version '1.0' \\ --date-published '2025-04-16' \\ --description 'Input data for computation example' \\ --keywords 'data,input' \\ --data-format 'csv' \\ --filepath './simple-computation/input.csv' # Register the software fairscape-cli rocrate register software \\ './simple-computation' \\ --name 'Data Processing Software' \\ --author 'Example Developer' \\ --version '1.0' \\ --description 'Software that computes sum and product of two columns' \\ --keywords 'software,processing' \\ --file-format 'py' \\ --filepath './simple-computation/software.py' \\ --date-modified '2025-04-16'","title":"1.2 Create and Register RO-Crate"},{"location":"workflows/complete-demo/#13-infer-and-validate-input-data-against-schema","text":"Let's create a schema for our input data and validate against it: # Create the tabular schema fairscape-cli schema create-tabular \\ --name 'Input Dataset Schema' \\ --description 'Schema for the input data used in the computation example' \\ --separator ',' \\ './simple-computation/input_schema.json' # Add properties to the schema fairscape-cli schema add-property integer \\ --name 'value1' \\ --index 0 \\ --description 'Column value1' \\ './simple-computation/input_schema.json' fairscape-cli schema add-property integer \\ --name 'value2' \\ --index 1 \\ --description 'Column value2' \\ './simple-computation/input_schema.json' # Register the schema with the RO-Crate fairscape-cli schema add-to-crate \\ './simple-computation' \\ './simple-computation/input_schema.json' # Validate the input data against the schema fairscape-cli schema validate \\ --schema './simple-computation/input_schema.json' \\ --data './simple-computation/input.csv'","title":"1.3 Infer and Validate Input Data Against Schema"},{"location":"workflows/complete-demo/#14-run-and-register-the-computation","text":"Execute the software and register the computation activity: # Run the software to generate output python ./simple-computation/software.py \\ ./simple-computation/input.csv \\ ./simple-computation/output.csv # Register the computation fairscape-cli rocrate register computation \\ './simple-computation' \\ --name 'Data Processing Computation' \\ --run-by 'Example Researcher' \\ --date-created '2025-04-16' \\ --description 'Computation that generates sum and product of input values' \\ --keywords 'computation,processing' \\ --used-software 'ark:59852/software-data-processing-software-XXXX' \\ --used-dataset 'ark:59852/dataset-input-dataset-XXXX' \\ --command 'python software.py input.csv output.csv' Note: Replace the ARK identifiers with the actual values returned by your previous commands.","title":"1.4 Run and Register the Computation"},{"location":"workflows/complete-demo/#15-register-output-and-infer-schema","text":"Register the output dataset and infer its schema: # Register the output dataset with explicit --generated-by parameter fairscape-cli rocrate register dataset \\ './simple-computation' \\ --name 'Output Dataset' \\ --author 'Example Author' \\ --version '1.0' \\ --date-published '2025-04-16' \\ --description 'Output data from computation example' \\ --keywords 'data,output' \\ --data-format 'csv' \\ --filepath './simple-computation/output.csv' \\ --generated-by 'ark:59852/computation-data-processing-computation-XXXX' # Infer the schema and add it to the RO-Crate fairscape-cli schema infer \\ --name 'Output Dataset Schema' \\ --description 'Schema for the output data used in the computation example' \\ --rocrate-path './simple-computation' \\ './simple-computation/output.csv' \\ './simple-computation/output_schema.json' # Validate the output data against the inferred schema fairscape-cli schema validate \\ --schema './simple-computation/output_schema.json' \\ --data './simple-computation/output.csv'","title":"1.5 Register Output and Infer Schema"},{"location":"workflows/complete-demo/#16-generate-a-provenance-graph-for-the-main-output","text":"Create a visual representation of the data provenance: # Generate evidence graph for the output dataset fairscape-cli build evidence-graph \\ './simple-computation' \\ 'ark:59852/dataset-output-dataset-XXXX' This will create both JSON and HTML visualizations of the data provenance in the RO-Crate.","title":"1.6 Generate a Provenance Graph for the Main Output"},{"location":"workflows/complete-demo/#step-2-build-a-crate-from-external-repository-data","text":"Now let's demonstrate how to pull data from an external repository and create a new RO-Crate.","title":"Step 2: Build a Crate from External Repository Data"},{"location":"workflows/complete-demo/#21-pull-data-from-an-external-repository","text":"# Pull data from a BioProject fairscape-cli import bioproject \\ --accession \"PRJDB2884\" \\ --api-key \"\" \\ --output-dir \"./sra-crate\" \\ --author \"Justin, Max\" This command fetches metadata from NCBI's BioProject database and creates a complete RO-Crate with that information.","title":"2.1 Pull Data from an External Repository"},{"location":"workflows/complete-demo/#22-create-schemas-for-external-data","text":"Let's create a schema for FASTQ sequence data: # Create a tabular schema for FASTQ format fairscape-cli schema create-tabular \\ --name 'fastq_data' \\ --description 'FASTQ sequence data schema' \\ --separator '\\n' \\ --header 'false' \\ './sra-crate/fastq_schema.json' # Add the header property to the schema fairscape-cli schema add-property string \\ --name 'header' \\ --index '0' \\ --description 'The header line starting with @' \\ --pattern '^@.*' \\ './sra-crate/fastq_schema.json' # Add the sequence property to the schema fairscape-cli schema add-property string \\ --name 'sequence' \\ --index '1' \\ --description 'The nucleotide sequence' \\ --pattern '^[ATCGN]+$' \\ './sra-crate/fastq_schema.json' # Add the plus sign line property to the schema fairscape-cli schema add-property string \\ --name 'plus' \\ --index '2' \\ --description 'The plus sign line' \\ --pattern '^\\+.*' \\ './sra-crate/fastq_schema.json' # Add the quality scores property to the schema fairscape-cli schema add-property string \\ --name 'quality_scores' \\ --index '3' \\ --description 'The quality scores in Phred+33 encoding' \\ './sra-crate/fastq_schema.json' # Register the schema with the RO-Crate fairscape-cli schema add-to-crate \\ './sra-crate' \\ './sra-crate/fastq_schema.json'","title":"2.2 Create Schemas for External Data"},{"location":"workflows/complete-demo/#23-generate-evidence-graph-for-external-data","text":"Find a key dataset in the crate and generate its evidence graph: # First, get the ID of a main dataset in the crate DATASET_ID = $( grep -o \"ark:59852/dataset-[a-zA-Z0-9-]*\" ./sra-crate/ro-crate-metadata.json | head -1 ) # Generate evidence graph for the dataset fairscape-cli build evidence-graph \\ './sra-crate' \\ \" $DATASET_ID \" \\ --output-file './sra-crate/provenance-graph.json'","title":"2.3 Generate Evidence Graph for External Data"},{"location":"workflows/complete-demo/#step-3-build-a-unified-release-crate","text":"Now, let's build a release crate that combines our local computation and the external data: # Create a release RO-Crate fairscape-cli build release ./ \\ --guid \"ark:59852/example-release-for-demo\" \\ --name \"SRA Genomic Data Example Release - 2025\" \\ --organization-name \"Example Research Institute\" \\ --project-name \"Genomic Data Analysis Project\" \\ --description \"This comprehensive dataset contains genomic data from multiple sources, including Japanese flounder (PRJDB2884) and human RNA-seq data (PRJEB86838) from the Sequence Read Archive (SRA). All data has been processed and prepared as AI-ready datasets in RO-Crate format, with appropriate metadata and provenance information to ensure FAIR data principles compliance.\" \\ --keywords \"Genomics\" \\ --keywords \"SRA\" \\ --keywords \"RNA-seq\" \\ --keywords \"Sequence Read Archive\" \\ --keywords \"Bioinformatics\" \\ --license \"https://creativecommons.org/licenses/by/4.0/\" \\ --version \"1.0\" \\ --publisher \"University of Virginia Dataverse\" \\ --principal-investigator \"Dr. Example PI\" \\ --copyright-notice \"Copyright (c) 2025 The Regents of the University of California except where otherwise noted.\" \\ --conditions-of-access \"Attribution is required to the copyright holders and the authors.\" \\ --contact-email \"example@example.org\" \\ --confidentiality-level \"HL7 Unrestricted\" \\ --funder \"Example Agency\" \\ --usage-info \"This dataset is intended for research purposes in genomics, bioinformatics, and related fields.\" \\ --content-size \"2.45 GB\" \\ --citation \"Example Research Institute (2025). SRA Genomic Data Example Release.\" \\ --associated-publication \"Smith et al. (2025). Novel approaches to genomic data analysis using SRA datasets.\" \\ --completeness \"These data contain complete processed datasets from the specified SRA projects.\" \\ --maintenance-plan \"This dataset will be periodically updated with corrections or additional annotations.\" \\ --intended-use \"This dataset is intended for genomic research and educational purposes.\" \\ --limitations \"While comprehensive quality control has been performed, researchers should be aware of inherent limitations.\" \\ --potential-sources-of-bias \"Original sample collection methods may introduce biases.\" \\ --prohibited-uses \"Commercial redistribution without attribution is prohibited.\" \\ --human-subject \"No\" # Generate a datasheet for the release fairscape-cli build datasheet ./ This creates a unified release that includes both our individual RO-Crates with a comprehensive datasheet.","title":"Step 3: Build a Unified Release Crate"},{"location":"workflows/complete-demo/#step-4-publishing-ro-crates","text":"Once you've created your RO-Crates and assembled them into a release, you can publish them to repositories for broader access and assign persistent identifiers.","title":"Step 4: Publishing RO-Crates"},{"location":"workflows/complete-demo/#4-publish-to-fairscape","text":"fairscape-cli publish fairscape \\ --rocrate \"./\" \\ --username \"your_username\" \\ --password \"your_password\" \\ --api-url \"https://fairscape.net/api\"","title":"4 Publish to Fairscape"},{"location":"workflows/complete-demo/#conclusion","text":"This workflow demonstrates the complete process of creating, managing, combining, and publishing research data packages using fairscape-cli. By following these steps, you can: Create well-structured RO-Crates with proper metadata Register data, software, and computations with appropriate relationships Define and validate data schemas Pull data from external repositories Generate provenance visualizations Build comprehensive release packages with rich metadata Publish your data to fairscape These capabilities enable FAIR (Findable, Accessible, Interoperable, Reusable) data sharing practices for scientific research, making your data discoverable, properly cited, and reusable by the broader community.","title":"Conclusion"}]}